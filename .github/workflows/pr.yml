# To run single-workspace, functional-with-jupyter or integration tests ensure the commit contains the text `test-<suite name>`.
# E.g.
# For #1234
# test-functional-with-jupyter

name: Pull Request

on:
  pull_request:
    branches:
      - main
      - ci
  check_run:
    types: [rerequested, requested_action]

env:
  NODE_VERSION: 12.15.0
  PYTHON_VERSION: 3.8
  MOCHA_REPORTER_JUNIT: true # Use the mocha-multi-reporters and send output to both console (spec) and JUnit (mocha-junit-reporter). Also enables a reporter which exits the process running the tests if it haven't already.
  CACHE_NPM_DEPS: cache-npm
  CACHE_OUT_DIRECTORY: cache-out-directory
  CACHE_PIP_DEPS: cache-pip
  # Key for the cache created at the end of the the 'Cache ./pythonFiles/lib/python' step.
  CACHE_PYTHONFILES: cache-pvsc-pythonFiles
  ARTIFACT_NAME_VSIX: ms-ai-tools-jupyter-insiders-vsix
  VSIX_NAME: ms-ai-tools-jupyter-insiders.vsix
  COVERAGE_REPORTS: tests-coverage-reports
  CI_PYTHON_PATH: python
  TEST_RESULTS_DIRECTORY: .

jobs:
  build-vsix:
    name: Build VSIX
    runs-on: ubuntu-latest
    if: github.repository == 'microsoft/vscode-jupyter'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node ${{env.NODE_VERSION}}
        uses: actions/setup-node@v2.1.1
        with:
          node-version: ${{env.NODE_VERSION}}

      # Caching of npm packages (https://github.com/actions/cache/blob/main/examples.md#node---npm)
      - name: Cache npm on linux/mac
        uses: actions/cache@v2
        if: matrix.os != 'windows-latest'
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Get npm cache directory
        if: matrix.os == 'windows-latest'
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: Cache npm on windows
        uses: actions/cache@v2
        if: matrix.os == 'windows-latest'
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Build VSIX
        uses: ./.github/actions/build-vsix
        id: build-vsix

      - name: Rename VSIX
        if: steps.build-vsix.outputs.path != env.VSIX_NAME
        run: mv ${{ steps.build-vsix.outputs.path }} ${{ env.VSIX_NAME }}

      - uses: actions/upload-artifact@v2
        with:
          name: ${{env.ARTIFACT_NAME_VSIX}}
          path: ${{env.VSIX_NAME}}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    if: github.repository == 'microsoft/vscode-jupyter'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache pip files
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{runner.os}}-${{env.CACHE_PIP_DEPS}}-${{env.PYTHON_VERSION}}

      - name: Cache npm files
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

      - name: Install dependencies (npm ci)
        run: npm ci --prefer-offline

      - name: Run linting on TypeScript code
        run: npx tslint --project tsconfig.json

      - name: Run prettier on TypeScript code
        run: npx prettier 'src/**/*.ts*' --check

      - name: Run prettier on JavaScript code
        run: npx prettier 'build/**/*.js' --check

      - name: Use Python ${{env.PYTHON_VERSION}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_VERSION}}

      - name: Run Black on Python code
        run: |
          python -m pip install -U black
          python -m black . --check
        working-directory: pythonFiles

      - name: Run gulp prePublishNonBundle
        run: npx gulp prePublishNonBundle

      - name: Cache the out/ directory
        uses: actions/cache@v2
        with:
          path: ./out
          key: ${{runner.os}}-${{env.CACHE_OUT_DIRECTORY}}-${{hashFiles('src/**')}}

      - name: Check dependencies
        run: npm run checkDependencies

  ts_tests:
    name: Type Script Tests
    runs-on: ${{ matrix.os }}
    # # if: github.repository == 'microsoft/vscode-jupyter'
    strategy:
      fail-fast: false
      matrix:
        # We're not running CI on macOS for now because it's one less matrix entry to lower the number of runners used,
        # macOS runners are expensive, and we assume that Ubuntu is enough to cover the UNIX case.
        os: [ubuntu-latest, windows-latest]
        test-suite: [ts-unit]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node ${{env.NODE_VERSION}}
        uses: actions/setup-node@v2.1.1
        with:
          node-version: ${{env.NODE_VERSION}}

      # Caching of npm packages (https://github.com/actions/cache/blob/main/examples.md#node---npm)
      - name: Cache npm on linux/mac
        uses: actions/cache@v2
        if: matrix.os != 'windows-latest'
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Get npm cache directory
        if: matrix.os == 'windows-latest'
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: Cache npm on windows
        uses: actions/cache@v2
        if: matrix.os == 'windows-latest'
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache compiled TS files
        # Use an id for this step so that its cache-hit output can be accessed and checked in the next step.
        id: out-cache
        uses: actions/cache@v2
        with:
          path: ./out
          key: ${{runner.os}}-${{env.CACHE_OUT_DIRECTORY}}-${{hashFiles('src/**')}}

      - name: Install dependencies (npm ci)
        run: npm ci --prefer-offline

      - name: Compile if not cached
        run: npx gulp prePublishNonBundle
        if: steps.out-cache.outputs.cache-hit == false

      - name: Run TypeScript unit tests
        run: npm run test:unittests:cover

  tests:
    name: Tests (with Python)
    # The value of runs-on is the OS of the current job (specified in the strategy matrix below) instead of being hardcoded.
    runs-on: ${{ matrix.os }}
    # if: github.repository == 'microsoft/vscode-jupyter'
    strategy:
      fail-fast: false
      matrix:
        # We're not running CI on macOS for now because it's one less matrix entry to lower the number of runners used,
        # macOS runners are expensive, and we assume that Ubuntu is enough to cover the UNIX case.
        os: [ubuntu-latest]
        python: [3.8] # Use flaky tests to run against more versions of Python.
        # python-unit: Python tests
        # functional: Tests with mocked VS Code, & mocked Python)
        # functional-with-jupyter: Tests with mocked VS Code & real jupyter
        # single-workspace: Tests with VS Code
        # integration: Tests with VS Code, Python extension & real Jupyter
        test-suite: [python-unit, functional, test-based-on-commit-message]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Python ${{matrix.python}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{matrix.python}}

      - name: Upgrade pip
        run: python -m pip install -U pip

      - name: Use Node ${{env.NODE_VERSION}}
        uses: actions/setup-node@v2.1.1
        with:
          node-version: ${{env.NODE_VERSION}}

      # Start caching

      # Cache Python Dependencies.
      # Caching (https://github.com/actions/cache/blob/main/examples.md#python---pip
      - name: Cache pip on linux
        uses: actions/cache@v2
        # if: startsWith(runner.os, 'Linux')
        if: startsWith(matrix.test-suite, 'functional') && matrix.os == 'ubuntu-latest'
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-${{ hashFiles('requirements.txt') }}-${{hashFiles('build/debugger-install-requirements.txt')}}-${{hashFiles('test-requirements.txt')}}-${{hashFiles('ipython-test-requirements.txt')}}-${{hashFiles('functional-test-requirements.txt')}}-${{hashFiles('conda-functional-requirements.txt')}}
          restore-keys: |
            ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-

      - name: Cache pip on mac
        uses: actions/cache@v2
        if: startsWith(matrix.test-suite, 'functional')  && matrix.os == 'macos-latest'
        with:
          path: ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-${{ hashFiles('requirements.txt') }}-${{hashFiles('build/debugger-install-requirements.txt')}}-${{hashFiles('test-requirements.txt')}}-${{hashFiles('ipython-test-requirements.txt')}}-${{hashFiles('functional-test-requirements.txt')}}-${{hashFiles('conda-functional-requirements.txt')}}
          restore-keys: |
            ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-

      - name: Cache pip on windows
        uses: actions/cache@v2
        # if: startsWith(runner.os, 'Windows')
        if: startsWith(matrix.test-suite, 'functional')  && matrix.os == 'windows-latest'
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-${{ hashFiles('requirements.txt') }}-${{hashFiles('build/debugger-install-requirements.txt')}}-${{hashFiles('test-requirements.txt')}}-${{hashFiles('ipython-test-requirements.txt')}}-${{hashFiles('functional-test-requirements.txt')}}-${{hashFiles('conda-functional-requirements.txt')}}
          restore-keys: |
            ${{ runner.os }}-pip-${{env.PYTHON_VERSION}}-

      # Caching of npm packages (https://github.com/actions/cache/blob/main/examples.md#node---npm)
      - name: Cache npm on linux/mac
        uses: actions/cache@v2
        if: matrix.os != 'windows-latest'
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Get npm cache directory
        if: matrix.os == 'windows-latest'
        id: npm-cache
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - name: Cache npm on windows
        uses: actions/cache@v2
        if: matrix.os == 'windows-latest'
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache compiled TS files
        # Use an id for this step so that its cache-hit output can be accessed and checked in the next step.
        id: out-cache
        uses: actions/cache@v2
        with:
          path: ./out
          key: ${{runner.os}}-${{env.CACHE_OUT_DIRECTORY}}-${{hashFiles('src/**')}}

      # For faster/better builds of sdists.
      - run: python -m pip install wheel
        if: startsWith(matrix.test-suite, 'functional')
        shell: bash

      # debugpy is not shipped, only installed for local tests.
      # In production, we get debugpy & LS from python extension.
      - name: Install functional test requirements
        run: |
          python -m pip --disable-pip-version-check install -r build/debugger-install-requirements.txt
          python ./pythonFiles/install_debugpy.py
          python -m pip install numpy
          python -m pip install --upgrade -r build/test-requirements.txt
          python -m pip install --upgrade -r ./build/ipython-test-requirements.txt
          python -m pip install --upgrade -r ./build/conda-functional-requirements.txt
        # This step is slow.
        # If running the placeholder suite & not required to run any tests, then don't install python dependencies.
        if: matrix.test-suite != 'test-based-on-commit-message' || contains(github.event.pull_request.body, '[x] Run ')

      - name: Install dependencies (npm ci)
        run: npm ci --prefer-offline
        # This step is slow.
        # If running the placeholder suite & not required to run any tests, then don't install python dependencies.
        if: matrix.test-suite != 'test-based-on-commit-message' || contains(github.event.pull_request.body, '[x] Run ')

      # Run the Python and IPython tests in our codebase.
      - name: Run Python and IPython unit tests
        run: |
          python pythonFiles/tests/run_all.py
          python -m IPython pythonFiles/tests/run_all.py
        if: matrix.test-suite == 'python-unit'

    #   - name: Compile if not cached
    #     run: npx gulp prePublishNonBundle
    #     if: steps.out-cache.outputs.cache-hit == false

      - name: Run functional tests
        run: npm run test:functional
        if: matrix.test-suite == 'functional'

      - name: Run single-workspace tests
        env:
          CI_PYTHON_VERSION: ${{matrix.python}}
        uses: GabrielBB/xvfb-action@v1.4
        with:
          run: npm run testSingleWorkspace
        if: matrix.test-suite == 'single-workspace' || (matrix.test-suite == 'test-based-on-commit-message' && github.event_name == 'pull_request' && contains(github.event.pull_request.body, '[x] Run single-workspace test'))

      - name: Run functional tests with Jupyter
        run: npm run test:functional
        env:
          VSCODE_PYTHON_ROLLING: 1
          VSC_PYTHON_FORCE_LOGGING: 1
        if: matrix.test-suite == 'functional-with-jupyter' || (matrix.test-suite == 'test-based-on-commit-message' && github.event_name == 'pull_request' && contains(github.event.pull_request.body, '[x] Run functional-with-jupyter test'))

      - name: Run DataScience tests with VSCode & Jupyter
        uses: GabrielBB/xvfb-action@v1.4
        with:
          run: npm run test:testDataScience
        env:
          VSCODE_PYTHON_ROLLING: 1
          VSC_PYTHON_FORCE_LOGGING: 1
        if: matrix.test-suite == 'integration' || (matrix.test-suite == 'test-based-on-commit-message' && github.event_name == 'pull_request' && contains(github.event.pull_request.body, '[x] Run integration test'))

#   smoke-tests:
#     name: Smoke tests
#     # The value of runs-on is the OS of the current job (specified in the strategy matrix below) instead of being hardcoded.
#     runs-on: ${{ matrix.os }}
#     if: github.repository == 'microsoft/vscode-jupyter'
#     needs: [build-vsix]
#     strategy:
#       fail-fast: false
#       matrix:
#         # We're not running CI on macOS for now because it's one less matrix entry to lower the number of runners used,
#         # macOS runners are expensive, and we assume that Ubuntu is enough to cover the UNIX case.
#         os: [ubuntu-latest, windows-latest]
#         python: [3.8]
#     steps:
#       # Need the source to have the tests available.
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Cache pip files
#         uses: actions/cache@v2
#         with:
#           path: ~/.cache/pip
#           key: ${{runner.os}}-${{env.CACHE_PIP_DEPS}}-${{env.PYTHON_VERSION}}

#       - name: Cache npm files
#         uses: actions/cache@v2
#         with:
#           path: ~/.npm
#           key: ${{runner.os}}-${{env.CACHE_NPM_DEPS}}-${{hashFiles('package-lock.json')}}

#       - name: Use Python ${{matrix.python}}
#         uses: actions/setup-python@v2
#         with:
#           python-version: ${{matrix.python}}

#       - name: Install dependencies (npm ci)
#         run: npm ci --prefer-offline

#       - name: pip install ipython requirements
#         run: |
#           python -m pip install numpy
#           python -m pip install --upgrade -r ./build/ipython-test-requirements.txt

#       - name: pip install jupyter
#         run: |
#           python -m pip install --upgrade jupyter

#       # Save time by reusing bits from the VSIX.
#       - name: Download VSIX
#         uses: actions/download-artifact@v2
#         with:
#           name: ${{env.ARTIFACT_NAME_VSIX}}

#       # Compile the test files.
#       - name: Prepare for smoke tests
#         run: npx tsc -p ./
#         shell: bash

#       - name: Set CI_PYTHON_PATH and CI_DISABLE_AUTO_SELECTION
#         run: |
#           echo "::set-env name=CI_PYTHON_PATH::python"
#           echo "::set-env name=CI_DISABLE_AUTO_SELECTION::1"
#         shell: bash

#       - name: Run smoke tests
#         env:
#           DISPLAY: 10
#         uses: GabrielBB/xvfb-action@v1.4
#         with:
#           run: node --no-force-async-hooks-checks ./out/test/smokeTest.js
