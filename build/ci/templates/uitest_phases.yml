# Variables:
# Parameters:
# 1. Tags
#   Mandatory.
#   Contain the `--tags=....` arguments to be passed into behave to exclude certain tags.
#   Multiple tags can be passed as `--tags=@smoke --tags=~@ignore1 --tags=~@another --tags=~@andMore`
#   More information on --tags argument for behave can be found here:
#       * https://behave.readthedocs.io/en/latest/tutorial.html#controlling-things-with-tags
#       * https://behave.readthedocs.io/en/latest/tag_expressions.html

steps:
    - bash: |
          printenv
      displayName: "Show all env vars"
      condition: eq(variables['system.debug'], 'true')

    - task: NodeTool@0
      displayName: "Use Node $(NodeVersion)"
      inputs:
          versionSpec: $(NodeVersion)

    - task: UsePythonVersion@0
      displayName: "Setup Python $(PythonVersion) for extension"
      inputs:
          versionSpec: $(PythonVersion)

    # Conda
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: Add conda to PATH
      condition: and(succeeded(), not(eq(variables['agent.os'], 'Windows_NT')))

    - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
      displayName: Add conda to PATH
      condition: and(succeeded(), eq(variables['agent.os'], 'Windows_NT'))

    # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
    # We need to take ownership if we want to update conda or install packages globally
    - bash: sudo chown -R $USER $CONDA
      displayName: Take ownership of conda installation
      condition: and(succeeded(), eq(variables['agent.os'], 'Darwin'))

    - script: |
          export CI_PYTHON_PATH=`which python`
          echo '##vso[task.setvariable variable=CI_PYTHON_PATH]'$CI_PYTHON_PATH
      displayName: "Setup CI_PYTHON_PATH for extension"
      condition: and(succeeded(), not(eq(variables['agent.os'], 'Windows_NT')))

    - powershell: |
          $CI_PYTHON_PATH = (get-command  python).path
          Write-Host "##vso[task.setvariable variable=CI_PYTHON_PATH]$CI_PYTHON_PATH"
          Write-Host $CI_PYTHON_PATH
      displayName: "Setup CI_PYTHON_PATH for extension"
      condition: and(succeeded(), eq(variables['agent.os'], 'Windows_NT'))

    # Some tests need to have both 2.7 & 3.7 available.
    # Also, use Python 3.7 to run the scripts that drive the ui tests.
    # Order matters, currently active python version will be used to drive tests.
    # Hence ensure 3.7 is setup last.
    - task: UsePythonVersion@0
      displayName: "Use Python 2.7"
      inputs:
          versionSpec: 2.7

    - task: UsePythonVersion@0
      displayName: "Use Python 3.7 (to drive tests)"
      inputs:
          versionSpec: 3.7

    - task: Npm@1
      displayName: "Use NPM $(NpmVersion)"
      inputs:
          command: custom
          verbose: true
          customCommand: "install -g npm@$(NpmVersion)"

    - task: Npm@1
      displayName: "npm ci"
      inputs:
          command: custom
          verbose: true
          customCommand: ci

    - bash: |
          echo AVAILABLE DEPENDENCY VERSIONS
          echo Node Version = `node -v`
          echo NPM Version = `npm -v`
          echo Python Version = `python --version`
          echo Gulp Version = `gulp --version`
      condition: and(succeeded(), eq(variables['system.debug'], 'true'))
      displayName: Show Dependency Versions

    # https://code.visualstudio.com/api/working-with-extensions/continuous-integration#azure-pipelines
    - bash: |
          set -e
          /usr/bin/Xvfb :10 -ac >> /tmp/Xvfb.out 2>&1 &
          disown -ar
      displayName: "Start xvfb"
      condition: and(succeeded(), eq(variables['Agent.Os'], 'Linux'), not(variables['SkipXvfb']))

    # - task: DownloadBuildArtifacts@0
    #   inputs:
    #       buildType: "current"
    #       artifactName: "VSIX"
    #       downloadPath: "$(Build.SourcesDirectory)"
    #   displayName: "Restore VSIX"
    #   condition: succeeded()

    # - task: CopyFiles@2
    #   inputs:
    #       sourceFolder: "$(Build.SourcesDirectory)/VSIX"
    #       targetFolder: $(Build.SourcesDirectory)
    #   displayName: "Copy VSIX"
    #   condition: succeeded()

    # Run the UI Tests.
    - bash: |
          python -m pip install -U pip
          python -m pip install --upgrade -r ./uitests/requirements.txt
          python uitests download
          npm install -g vsce
          python uitests install
      env:
          DISPLAY: :10
          AgentJobName: $(Agent.JobName)
      displayName: "Download & Install UI Test Dependencies"
      condition: succeeded()

    - script: python uitests test --embed_screenshots -- --format=progress3 $(Tags) --tags=~@skip -D python_path=$(CI_PYTHON_PATH)
      env:
          DISPLAY: :10
          AgentJobName: $(Agent.JobName)
      failOnStderr: true
      displayName: "Run Tests"
      condition: succeeded()

    # Generate and publis results even if there are failures in previous steps.
    - script: python uitests report
      env:
          AgentJobName: $(Agent.JobName)
      displayName: "Generate Reports"
      condition: always()

    - task: CopyFiles@2
      inputs:
          contents: ".vscode-test/reports/**"
          targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: "Copy Reports"
      condition: always()

    - task: CopyFiles@2
      inputs:
          contents: ".vscode-test/logs/**"
          targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: "Copy Extension Logs"
      condition: always()

    - task: CopyFiles@2
      inputs:
          contents: ".vscode-test/user/logs/**"
          targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: "Copy VSC Logs"
      condition: always()

    - task: PublishBuildArtifacts@1
      inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: $(Agent.JobName)
      displayName: "Upload Reports"
      condition: always()

    - task: PublishTestResults@2
      displayName: "TestResults"
      inputs:
          testRunner: JUnit
          testResultsFiles: "$(Build.SourcesDirectory)/.vscode-test/reports/*.xml"
      condition: always()
