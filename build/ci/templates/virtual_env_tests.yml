parameters:
  name: 'VirtualEnv_Tests_Windows_py37'
  PythonVersion: '3.7'
  NodeVersion: '8.11.2'
  NpmVersion: 'latest'
  PoolName: 'Hosted VS2017'
  MOCHA_CI_REPORTER_ID: '$(Build.SourcesDirectory)/build/ci/mocha-vsts-reporter.js'
  MOCHA_CI_REPORTFILE: '$(Build.ArtifactStagingDirectory)/reports/junit-report.xml'
  MOCHA_REPORTER_JUNIT: true
  RunHygiene: true
  UploadBinary: false
  AzureStorageAccountName: 'vscodepythonci'
  AzureStorageContainerName: 'vscode-python-ci'
  EnvironmentExecutableFolder: 'Scripts'
  ENV_PATHS_LOCATION: './src/testVirtualEnv/envPaths.json'
  TEST_FILES_SUFFIX: 'test-virtualenvs.ts'
  TestSuiteName: 'testSingleWorkspace'

jobs:
- job: ${{ parameters.name }}
  dependsOn: 'PR_Validate_Windows_py37'
  pool:
    name: ${{ parameters.PoolName }}

  variables:
    # TODO: use {{ insert }}: {{ parameters.variables }}, it would not work at time I wrote this
    nodeVersion: ${{ parameters.NodeVersion }}
    npmVersion: ${{ parameters.NpmVersion }}
    pythonVersion: ${{ parameters.PythonVersion }}
    mochaReportFile: ${{ parameters.MOCHA_CI_REPORTFILE }}
    MOCHA_CI_REPORTER_ID: ${{ parameters.MOCHA_CI_REPORTER_ID }}
    MOCHA_CI_REPORTFILE: ${{ parameters.MOCHA_CI_REPORTFILE }}
    MOCHA_REPORTER_JUNIT: ${{ parameters.MOCHA_REPORTER_JUNIT }}
    runHygiene: ${{ parameters.RunHygiene }}
    uploadBinary: ${{ parameters.UploadBinary }}
    azureStorageAcctName: ${{ parameters.AzureStorageAccountName }}
    azureStorageContainerName: ${{ parameters.AzureStorageContainerName }}
    plaform: ${{ parameters.Platform }}
    environmentExecutableFolder: ${{ parameters.EnvironmentExecutableFolder }}
    ENV_PATHS_LOCATION: ${{ parameters.ENV_PATHS_LOCATION }}
    TEST_FILES_SUFFIX: ${{ parameters.TEST_FILES_SUFFIX }}
    TestSuiteName: ${{ parameters.TestSuiteName }}

  steps:
    - bash: echo REQUESTED VARIABLE VALUES

        echo Node Version = $(nodeVersion)

        echo Python Version = $(pythonVersion)

        echo NPM Version = $(npmVersion)

        echo Mocha reportfile = '$(mochaReportFile)'

        echo MOCHA_CI_REPORTFILE = $MOCHA_CI_REPORTFILE

        echo MOCHA_CI_REPORTER_ID = $MOCHA_CI_REPORTER_ID

        echo MOCHA_REPORTER_JUNIT = $MOCHA_REPORTER_JUNIT

        echo COV_UUID = $COV_UUID

        echo Run Hygiene = $(runHygiene)

      displayName: 'Show build vars'
      name: 'show_bld_vars'


    - powershell: |
        New-Item -ItemType directory -Path "$(System.ArtifactsDirectory)/bin-artifacts"

        $buildArtifactUri = "https://$(azureStorageAcctName).blob.core.windows.net/$(azureStorageContainerName)/$(Build.BuildNumber)/bin-artifacts.zip"
        Write-Verbose "Downloading from $buildArtifactUri"

        $destination = "$(System.ArtifactsDirectory)/bin-artifacts/bin-artifacts.zip"
        Write-Verbose "Destination file: $destination"

        Invoke-WebRequest -Uri $buildArtifactUri -OutFile $destination -Verbose

      displayName: 'Download bin-artifacts from cloud-storage'


    - task: ExtractFiles@1
      displayName: 'Splat bin-artifacts'
      inputs:
        archiveFilePatterns: '$(System.ArtifactsDirectory)/bin-artifacts/bin-artifacts.zip'

        destinationFolder: '$(Build.SourcesDirectory)'

        cleanDestinationFolder: false


    - task: UsePythonVersion@0
      displayName: 'Use Python 3.7'
      inputs:
        versionSpec: 3.7


    - bash: |
       echo "#Adds the virtual environment's executable path to json file

       import json,sys
       import os.path
       key = sys.argv[1]

       if os.path.isfile('$(ENV_PATHS_LOCATION)'):
           with open('$(ENV_PATHS_LOCATION)', 'r') as read_file:
               data = json.load(read_file)
       else:
           with open('$(ENV_PATHS_LOCATION)', 'w+') as read_file:
               data = {}
       with open('$(ENV_PATHS_LOCATION)', 'w') as outfile:
           data[key] = sys.executable
           json.dump(data, outfile, sort_keys=True, indent=4)" > addEnvPath.py

      displayName: 'Create Environment paths adder'


    - bash: |
       pip install pipenv

       pipenv run python addEnvPath.py pipenv

       cat $(ENV_PATHS_LOCATION)

      displayName: 'Create pipenv environment'


    - bash: |
       python -m venv .venv

       .venv/$(environmentExecutableFolder)/python addEnvPath.py venv

       cat $(ENV_PATHS_LOCATION)

      displayName: 'Create venv environment'


    - bash: |
       pip install virtualenv

       python -m virtualenv .virtualenv

       .virtualenv/$(environmentExecutableFolder)/python addEnvPath.py virtualenv

       cat $(ENV_PATHS_LOCATION)

      displayName: 'Create virtualenv environment'


    # - task: CondaEnvironment@1
    #   displayName: 'Create conda environment '
    #   inputs:
    #     packageSpecs: 'python=3.7'


    # - bash: |
    #    python addEnvPath.py conda

    #    source deactivate

    #    cat $(ENV_PATHS_LOCATION)

    #   displayName: 'Save conda environment executable'


    - task: Npm@1
      displayName: 'update npm'
      inputs:
        command: custom

        verbose: true

        customCommand: 'install -g npm@$(NpmVersion)'


    - bash: echo AVAILABLE DEPENDENCY VERSIONS

        echo Node Version = `node -v`

        echo NPM Version = `npm -v`

        echo Python Version = `python --version`

        echo CI_PYTHON_PATH = $CI_PYTHON_PATH

        echo Reported Python Path = `python -c "import sys;print(sys.executable)"`

      displayName: 'Show build dependency versions'
      name: 'show_bld_deps_vers'


    - task: Npm@1
      displayName: 'npm ci'
      inputs:
        command: custom

        verbose: true

        customCommand: ci


    - task: CmdLine@1
      displayName: 'pip upgrade pip'
      inputs:
        filename: python

        arguments: '-m pip install --upgrade pip'


    - task: CmdLine@1
      displayName: 'pip install requirements'
      inputs:
        filename: python

        arguments: '-m pip install --upgrade -r ./build/test-requirements.txt'


    - task: CmdLine@1
      displayName: 'pip install ptvsd'
      inputs:
        filename: python

        arguments: '-m pip --disable-pip-version-check install -t ./pythonFiles/lib/python --no-cache-dir --implementation py --no-deps --upgrade -r requirements.txt'


    - task: Npm@1
      displayName: 'run $(TestSuiteName)'
      inputs:
        command: custom

        verbose: true

        customCommand: 'run $(TestSuiteName)'


