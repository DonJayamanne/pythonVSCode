{
    "name": "python",
    "displayName": "Python",
    "description": "Linting, Debugging (multi-threaded, remote), Intellisense, Jupyter Notebooks, code formatting, refactoring, unit tests, snippets, and more.",
    "version": "2020.5.0-dev",
    "featureFlags": {
        "usingNewInterpreterStorage": true
    },
    "languageServerVersion": "0.5.30",
    "publisher": "ms-python",
    "enableProposedApi": false,
    "author": {
        "name": "Microsoft Corporation"
    },
    "license": "MIT",
    "homepage": "https://github.com/Microsoft/vscode-python",
    "repository": {
        "type": "git",
        "url": "https://github.com/Microsoft/vscode-python"
    },
    "bugs": {
        "url": "https://github.com/Microsoft/vscode-python/issues"
    },
    "qna": "https://stackoverflow.com/questions/tagged/visual-studio-code+python",
    "icon": "icon.png",
    "galleryBanner": {
        "color": "#1e415e",
        "theme": "dark"
    },
    "engines": {
        "vscode": "^1.43.0"
    },
    "keywords": [
        "python",
        "django",
        "unittest",
        "multi-root ready"
    ],
    "categories": [
        "Programming Languages",
        "Debuggers",
        "Linters",
        "Snippets",
        "Formatters",
        "Other"
    ],
    "activationEvents": [
        "onLanguage:python",
        "onLanguage:jupyter",
        "onDebugResolve:python",
        "onCommand:python.execInTerminal",
        "onCommand:python.sortImports",
        "onCommand:python.runtests",
        "onCommand:python.debugtests",
        "onCommand:python.setInterpreter",
        "onCommand:python.setShebangInterpreter",
        "onCommand:python.viewTestUI",
        "onCommand:python.viewLanguageServerOutput",
        "onCommand:python.viewTestOutput",
        "onCommand:python.viewOutput",
        "onCommand:python.datascience.viewJupyterOutput",
        "onCommand:python.selectAndRunTestMethod",
        "onCommand:python.selectAndDebugTestMethod",
        "onCommand:python.selectAndRunTestFile",
        "onCommand:python.runCurrentTestFile",
        "onCommand:python.runFailedTests",
        "onCommand:python.execSelectionInTerminal",
        "onCommand:python.execSelectionInDjangoShell",
        "onCommand:python.buildWorkspaceSymbols",
        "onCommand:python.startREPL",
        "onCommand:python.goToPythonObject",
        "onCommand:python.setLinter",
        "onCommand:python.enableLinting",
        "onCommand:python.createTerminal",
        "onCommand:python.discoverTests",
        "onCommand:python.configureTests",
        "onCommand:python.switchOffInsidersChannel",
        "onCommand:python.switchToDailyChannel",
        "onCommand:python.switchToWeeklyChannel",
        "onCommand:python.clearWorkspaceInterpreter",
        "onCommand:python.resetInterpreterSecurityStorage",
        "onCommand:python.datascience.createnewnotebook",
        "onCommand:python.datascience.showhistorypane",
        "onCommand:python.datascience.importnotebook",
        "onCommand:python.datascience.importnotebookfile",
        "onCommand:python.datascience.opennotebook",
        "onCommand:python.datascience.selectjupyteruri",
        "onCommand:python.datascience.exportfileasnotebook",
        "onCommand:python.datascience.exportfileandoutputasnotebook",
        "onCommand:python.datascience.selectJupyterInterpreter",
        "onCommand:python.datascience.selectjupytercommandline",
        "onCommand:python.enableSourceMapSupport",
        "onCustomEditor:NativeEditorProvider.ipynb",
        "workspaceContains:**/mspythonconfig.json"
    ],
    "main": "./out/client/extension",
    "contributes": {
        "snippets": [
            {
                "language": "python",
                "path": "./snippets/python.json"
            }
        ],
        "keybindings": [
            {
                "command": "python.execSelectionInTerminal",
                "key": "shift+enter",
                "when": "editorTextFocus && editorLangId == python && !findInputFocussed && !replaceInputFocussed && !python.datascience.ownsSelection"
            },
            {
                "command": "python.datascience.execSelectionInteractive",
                "key": "shift+enter",
                "when": "editorTextFocus && editorLangId == python && !findInputFocussed && !replaceInputFocussed && python.datascience.ownsSelection && python.datascience.featureenabled"
            },
            {
                "command": "python.datascience.runcurrentcelladvance",
                "key": "shift+enter",
                "when": "editorTextFocus && !editorHasSelection && python.datascience.hascodecells && python.datascience.featureenabled"
            },
            {
                "command": "python.datascience.runcurrentcell",
                "key": "ctrl+enter",
                "when": "editorTextFocus && !editorHasSelection && python.datascience.hascodecells && python.datascience.featureenabled"
            },
            {
                "command": "python.datascience.runcurrentcellandaddbelow",
                "key": "alt+enter",
                "when": "editorTextFocus && !editorHasSelection && python.datascience.hascodecells && python.datascience.featureenabled"
            }
        ],
        "commands": [
            {
                "command": "python.enableSourceMapSupport",
                "title": "%python.command.python.enableSourceMapSupport.title%",
                "category": "Python"
            },
            {
                "command": "python.sortImports",
                "title": "%python.command.python.sortImports.title%",
                "category": "Python Refactor"
            },
            {
                "command": "python.startREPL",
                "title": "%python.command.python.startREPL.title%",
                "category": "Python"
            },
            {
                "command": "python.createTerminal",
                "title": "%python.command.python.createTerminal.title%",
                "category": "Python"
            },
            {
                "command": "python.buildWorkspaceSymbols",
                "title": "%python.command.python.buildWorkspaceSymbols.title%",
                "category": "Python"
            },
            {
                "command": "python.openTestNodeInEditor",
                "title": "Open",
                "icon": {
                    "light": "resources/light/open-file.svg",
                    "dark": "resources/dark/open-file.svg"
                }
            },
            {
                "command": "python.runTestNode",
                "title": "Run",
                "icon": {
                    "light": "resources/light/start.svg",
                    "dark": "resources/dark/start.svg"
                }
            },
            {
                "command": "python.debugTestNode",
                "title": "Debug",
                "icon": {
                    "light": "resources/light/debug.svg",
                    "dark": "resources/dark/debug.svg"
                }
            },
            {
                "command": "python.runtests",
                "title": "%python.command.python.runtests.title%",
                "category": "Python",
                "icon": {
                    "light": "resources/light/run-tests.svg",
                    "dark": "resources/dark/run-tests.svg"
                }
            },
            {
                "command": "python.debugtests",
                "title": "%python.command.python.debugtests.title%",
                "category": "Python",
                "icon": {
                    "light": "resources/light/debug.svg",
                    "dark": "resources/dark/debug.svg"
                }
            },
            {
                "command": "python.execInTerminal",
                "title": "%python.command.python.execInTerminal.title%",
                "category": "Python"
            },
            {
                "command": "python.execInTerminal-icon",
                "title": "%python.command.python.execInTerminal.title%",
                "category": "Python",
                "icon": {
                    "light": "resources/light/run-file.svg",
                    "dark": "resources/dark/run-file.svg"
                }
            },
            {
                "command": "python.setInterpreter",
                "title": "%python.command.python.setInterpreter.title%",
                "category": "Python"
            },
            {
                "command": "python.switchOffInsidersChannel",
                "title": "%python.command.python.switchOffInsidersChannel.title%",
                "category": "Python"
            },
            {
                "command": "python.switchToDailyChannel",
                "title": "%python.command.python.switchToDailyChannel.title%",
                "category": "Python"
            },
            {
                "command": "python.switchToWeeklyChannel",
                "title": "%python.command.python.switchToWeeklyChannel.title%",
                "category": "Python"
            },
            {
                "command": "python.clearWorkspaceInterpreter",
                "title": "%python.command.python.clearWorkspaceInterpreter.title%",
                "category": "Python"
            },
            {
                "command": "python.resetInterpreterSecurityStorage",
                "title": "%python.command.python.resetInterpreterSecurityStorage.title%",
                "category": "Python"
            },
            {
                "command": "python.refactorExtractVariable",
                "title": "%python.command.python.refactorExtractVariable.title%",
                "category": "Python Refactor"
            },
            {
                "command": "python.refactorExtractMethod",
                "title": "%python.command.python.refactorExtractMethod.title%",
                "category": "Python Refactor"
            },
            {
                "command": "python.viewTestOutput",
                "title": "%python.command.python.viewTestOutput.title%",
                "category": "Python",
                "icon": {
                    "light": "resources/light/repl.svg",
                    "dark": "resources/dark/repl.svg"
                }
            },
            {
                "command": "python.datascience.viewJupyterOutput",
                "title": "%python.command.python.datascience.viewJupyterOutput.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.selectJupyterInterpreter",
                "title": "%python.command.python.datascience.selectJupyterInterpreter.title%",
                "category": "Python"
            },
            {
                "command": "python.viewLanguageServerOutput",
                "title": "%python.command.python.viewLanguageServerOutput.title%",
                "category": "Python",
                "enablement": "python.hasLanguageServerOutputChannel"
            },
            {
                "command": "python.viewOutput",
                "title": "%python.command.python.viewOutput.title%",
                "category": "Python",
                "icon": {
                    "light": "resources/light/repl.svg",
                    "dark": "resources/dark/repl.svg"
                }
            },
            {
                "command": "python.selectAndRunTestMethod",
                "title": "%python.command.python.selectAndRunTestMethod.title%",
                "category": "Python"
            },
            {
                "command": "python.selectAndDebugTestMethod",
                "title": "%python.command.python.selectAndDebugTestMethod.title%",
                "category": "Python"
            },
            {
                "command": "python.selectAndRunTestFile",
                "title": "%python.command.python.selectAndRunTestFile.title%",
                "category": "Python"
            },
            {
                "command": "python.runCurrentTestFile",
                "title": "%python.command.python.runCurrentTestFile.title%",
                "category": "Python"
            },
            {
                "command": "python.runFailedTests",
                "title": "%python.command.python.runFailedTests.title%",
                "category": "Python",
                "icon": {
                    "light": "resources/light/run-failed-tests.svg",
                    "dark": "resources/dark/run-failed-tests.svg"
                }
            },
            {
                "command": "python.discoverTests",
                "title": "%python.command.python.discoverTests.title%",
                "category": "Python",
                "icon": {
                    "light": "resources/light/refresh.svg",
                    "dark": "resources/dark/refresh.svg"
                }
            },
            {
                "command": "python.discoveringTests",
                "title": "%python.command.python.discoveringTests.title%",
                "category": "Python",
                "icon": {
                    "light": "resources/light/discovering-tests.svg",
                    "dark": "resources/dark/discovering-tests.svg"
                }
            },
            {
                "command": "python.stopTests",
                "title": "%python.command.python.stopTests.title%",
                "category": "Python",
                "icon": {
                    "light": "resources/light/stop.svg",
                    "dark": "resources/dark/stop.svg"
                }
            },
            {
                "command": "python.configureTests",
                "title": "%python.command.python.configureTests.title%",
                "category": "Python"
            },
            {
                "command": "python.execSelectionInTerminal",
                "title": "%python.command.python.execSelectionInTerminal.title%",
                "category": "Python"
            },
            {
                "command": "python.execSelectionInDjangoShell",
                "title": "%python.command.python.execSelectionInDjangoShell.title%",
                "category": "Python"
            },
            {
                "command": "python.goToPythonObject",
                "title": "%python.command.python.goToPythonObject.title%",
                "category": "Python"
            },
            {
                "command": "python.setLinter",
                "title": "%python.command.python.setLinter.title%",
                "category": "Python"
            },
            {
                "command": "python.enableLinting",
                "title": "%python.command.python.enableLinting.title%",
                "category": "Python"
            },
            {
                "command": "python.runLinting",
                "title": "%python.command.python.runLinting.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.runcurrentcell",
                "title": "%python.command.python.datascience.runcurrentcell.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.debugcell",
                "title": "%python.command.python.datascience.debugcell.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.debugstepover",
                "title": "%python.command.python.datascience.debugstepover.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.debugstop",
                "title": "%python.command.python.datascience.debugstop.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.debugcontinue",
                "title": "%python.command.python.datascience.debugcontinue.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.runcurrentcelladvance",
                "title": "%python.command.python.datascience.runcurrentcelladvance.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.runcurrentcellandallbelow.palette",
                "title": "%python.command.python.datascience.runcurrentcellandallbelow.palette.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.runallcellsabove.palette",
                "title": "%python.command.python.datascience.runallcellsabove.palette.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.debugcurrentcell.palette",
                "title": "%python.command.python.datascience.debugcurrentcell.palette.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.execSelectionInteractive",
                "title": "%python.command.python.datascience.execSelectionInteractive.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.showhistorypane",
                "title": "%python.command.python.datascience.showhistorypane.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.runFileInteractive",
                "title": "%python.command.python.datascience.runFileInteractive.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.debugFileInteractive",
                "title": "%python.command.python.datascience.debugFileInteractive.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.runallcells",
                "title": "%python.command.python.datascience.runallcells.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.runallcellsabove",
                "title": "%python.command.python.datascience.runallcellsabove.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.runcellandallbelow",
                "title": "%python.command.python.datascience.runcellandallbelow.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.runcell",
                "title": "%python.command.python.datascience.runcell.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.runtoline",
                "title": "%python.command.python.datascience.runtoline.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.runfromline",
                "title": "%python.command.python.datascience.runfromline.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.selectjupyteruri",
                "title": "%python.command.python.datascience.selectjupyteruri.title%",
                "category": "Python",
                "when": "python.datascience.featureenabled"
            },
            {
                "command": "python.datascience.selectjupytercommandline",
                "title": "%python.command.python.datascience.selectjupytercommandline.title%",
                "category": "Python",
                "when": "python.datascience.featureenabled"
            },
            {
                "command": "python.datascience.importnotebook",
                "title": "%python.command.python.datascience.importnotebook.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.importnotebookfile",
                "title": "%python.command.python.datascience.importnotebookfile.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.opennotebook",
                "title": "%python.command.python.datascience.opennotebook.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.exportoutputasnotebook",
                "title": "%python.command.python.datascience.exportoutputasnotebook.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.exportfileasnotebook",
                "title": "%python.command.python.datascience.exportfileasnotebook.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.exportfileandoutputasnotebook",
                "title": "%python.command.python.datascience.exportfileandoutputasnotebook.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.undocells",
                "title": "%python.command.python.datascience.undocells.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.redocells",
                "title": "%python.command.python.datascience.redocells.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.notebookeditor.undocells",
                "title": "%python.command.python.datascience.undocells.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.notebookeditor.redocells",
                "title": "%python.command.python.datascience.redocells.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.removeallcells",
                "title": "%python.command.python.datascience.removeallcells.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.interruptkernel",
                "title": "%python.command.python.datascience.interruptkernel.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.restartkernel",
                "title": "%python.command.python.datascience.restartkernel.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.notebookeditor.removeallcells",
                "title": "%python.command.python.datascience.notebookeditor.removeallcells.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.notebookeditor.interruptkernel",
                "title": "%python.command.python.datascience.interruptkernel.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.notebookeditor.restartkernel",
                "title": "%python.command.python.datascience.restartkernel.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.notebookeditor.runallcells",
                "title": "%python.command.python.datascience.notebookeditor.runallcells.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.notebookeditor.runselectedcell",
                "title": "%python.command.python.datascience.notebookeditor.runselectedcell.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.notebookeditor.addcellbelow",
                "title": "%python.command.python.datascience.notebookeditor.addcellbelow.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.expandallcells",
                "title": "%python.command.python.datascience.expandallcells.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.collapseallcells",
                "title": "%python.command.python.datascience.collapseallcells.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.addcellbelow",
                "title": "%python.command.python.datascience.addcellbelow.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.createnewnotebook",
                "title": "%python.command.python.datascience.createnewnotebook.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.scrolltocell",
                "title": "%python.command.python.datascience.scrolltocell.title%",
                "category": "Python"
            },
            {
                "command": "python.analysis.clearCache",
                "title": "%python.command.python.analysis.clearCache.title%",
                "category": "Python"
            },
            {
                "command": "python.datascience.switchKernel",
                "title": "%DataScience.selectKernel%",
                "category": "Python",
                "enablement": "python.datascience.isnativeactive"
            },
            {
                "command": "python.datascience.gatherquality",
                "title": "DataScience.gatherQuality",
                "category": "Python"
            }
        ],
        "menus": {
            "editor/context": [
                {
                    "command": "python.refactorExtractVariable",
                    "title": "Refactor: Extract Variable",
                    "group": "Refactor",
                    "when": "editorHasSelection && editorLangId == python"
                },
                {
                    "command": "python.refactorExtractMethod",
                    "title": "Refactor: Extract Method",
                    "group": "Refactor",
                    "when": "editorHasSelection && editorLangId == python"
                },
                {
                    "command": "python.sortImports",
                    "title": "Refactor: Sort Imports",
                    "group": "Refactor",
                    "when": "editorLangId == python"
                },
                {
                    "command": "python.execSelectionInTerminal",
                    "group": "Python",
                    "when": "editorFocus && editorLangId == python"
                },
                {
                    "command": "python.execSelectionInDjangoShell",
                    "group": "Python",
                    "when": "editorHasSelection && editorLangId == python && python.isDjangoProject"
                },
                {
                    "when": "resourceLangId == python",
                    "command": "python.execInTerminal",
                    "group": "Python"
                },
                {
                    "when": "resourceLangId == python",
                    "command": "python.runCurrentTestFile",
                    "group": "Python"
                },
                {
                    "when": "editorFocus && editorLangId == python && python.datascience.hascodecells && python.datascience.featureenabled",
                    "command": "python.datascience.runallcells",
                    "group": "Python2"
                },
                {
                    "when": "editorFocus && editorLangId == python && python.datascience.hascodecells && python.datascience.featureenabled",
                    "command": "python.datascience.runcurrentcell",
                    "group": "Python2"
                },
                {
                    "when": "editorFocus && editorLangId == python && python.datascience.hascodecells && python.datascience.featureenabled",
                    "command": "python.datascience.runcurrentcelladvance",
                    "group": "Python2"
                },
                {
                    "command": "python.datascience.runFileInteractive",
                    "group": "Python2",
                    "when": "editorFocus && editorLangId == python && python.datascience.featureenabled"
                },
                {
                    "command": "python.datascience.runfromline",
                    "group": "Python2",
                    "when": "editorFocus && editorLangId == python && python.datascience.ownsSelection && python.datascience.featureenabled"
                },
                {
                    "command": "python.datascience.runtoline",
                    "group": "Python2",
                    "when": "editorFocus && editorLangId == python && python.datascience.ownsSelection && python.datascience.featureenabled"
                },
                {
                    "command": "python.datascience.execSelectionInteractive",
                    "group": "Python2",
                    "when": "editorFocus && editorLangId == python && python.datascience.featureenabled && python.datascience.ownsSelection"
                },
                {
                    "when": "editorFocus && editorLangId == python && resourceLangId == jupyter && python.datascience.featureenabled",
                    "command": "python.datascience.importnotebook",
                    "group": "Python3@1"
                },
                {
                    "when": "editorFocus && editorLangId == python && python.datascience.hascodecells && python.datascience.featureenabled",
                    "command": "python.datascience.exportfileasnotebook",
                    "group": "Python3@2"
                },
                {
                    "when": "editorFocus && editorLangId == python && python.datascience.hascodecells && python.datascience.featureenabled",
                    "command": "python.datascience.exportfileandoutputasnotebook",
                    "group": "Python3@3"
                }
            ],
            "editor/title": [
                {
                    "command": "python.execInTerminal-icon",
                    "title": "%python.command.python.execInTerminal.title%",
                    "group": "navigation",
                    "when": "resourceLangId == python && python.showPlayIcon"
                }
            ],
            "explorer/context": [
                {
                    "when": "resourceLangId == python && !busyTests",
                    "command": "python.runtests",
                    "group": "Python"
                },
                {
                    "when": "resourceLangId == python && !busyTests",
                    "command": "python.debugtests",
                    "group": "Python"
                },
                {
                    "when": "resourceLangId == python",
                    "command": "python.execInTerminal",
                    "group": "Python"
                },
                {
                    "when": "resourceLangId == python && python.datascience.featureenabled",
                    "command": "python.datascience.runFileInteractive",
                    "group": "Python2"
                },
                {
                    "when": "resourceLangId == jupyter",
                    "command": "python.datascience.opennotebook",
                    "group": "Python"
                },
                {
                    "when": "resourceLangId == jupyter",
                    "command": "python.datascience.importnotebookfile",
                    "group": "Python"
                }
            ],
            "commandPalette": [
                {
                    "command": "python.switchOffInsidersChannel",
                    "title": "%python.command.python.switchOffInsidersChannel.title%",
                    "category": "Python",
                    "when": "config.python.insidersChannel != 'default'"
                },
                {
                    "command": "python.switchToDailyChannel",
                    "title": "%python.command.python.switchToDailyChannel.title%",
                    "category": "Python",
                    "when": "config.python.insidersChannel != 'daily'"
                },
                {
                    "command": "python.switchToWeeklyChannel",
                    "title": "%python.command.python.switchToWeeklyChannel.title%",
                    "category": "Python",
                    "when": "config.python.insidersChannel != 'weekly'"
                },
                {
                    "command": "python.clearWorkspaceInterpreter",
                    "title": "%python.command.python.clearWorkspaceInterpreter.title%",
                    "category": "Python"
                },
                {
                    "command": "python.resetInterpreterSecurityStorage",
                    "title": "%python.command.python.resetInterpreterSecurityStorage.title%",
                    "category": "Python"
                },
                {
                    "command": "python.viewOutput",
                    "title": "%python.command.python.viewOutput.title%",
                    "category": "Python"
                },
                {
                    "command": "python.runTestNode",
                    "title": "Run",
                    "category": "Python",
                    "when": "config.noExists"
                },
                {
                    "command": "python.discoveringTests",
                    "category": "Python",
                    "when": "config.noExists"
                },
                {
                    "command": "python.stopTests",
                    "category": "Python",
                    "when": "config.noExists"
                },
                {
                    "command": "python.debugTestNode",
                    "title": "Debug",
                    "category": "Python",
                    "when": "config.noExists"
                },
                {
                    "command": "python.openTestNodeInEditor",
                    "title": "Open",
                    "category": "Python",
                    "when": "config.noExists"
                },
                {
                    "command": "python.datascience.runcurrentcell",
                    "title": "%python.command.python.datascience.runcurrentcell.title%",
                    "category": "Python",
                    "when": "python.datascience.hascodecells && python.datascience.featureenabled && python.datascience.ispythonornativeactive"
                },
                {
                    "command": "python.datascience.runcurrentcelladvance",
                    "title": "%python.command.python.datascience.runcurrentcelladvance.title%",
                    "category": "Python",
                    "when": "python.datascience.hascodecells && python.datascience.featureenabled && python.datascience.ispythonornativeactive"
                },
                {
                    "command": "python.datascience.runcurrentcellandallbelow.palette",
                    "title": "%python.command.python.datascience.runcurrentcellandallbelow.palette.title%",
                    "category": "Python",
                    "when": "python.datascience.hascodecells && python.datascience.featureenabled && python.datascience.ispythonornativeactive"
                },
                {
                    "command": "python.datascience.runallcellsabove.palette",
                    "title": "%python.command.python.datascience.runallcellsabove.palette.title%",
                    "category": "Python",
                    "when": "python.datascience.hascodecells && python.datascience.featureenabled && python.datascience.ispythonornativeactive"
                },
                {
                    "command": "python.datascience.debugcurrentcell.palette",
                    "title": "%python.command.python.datascience.debugcurrentcell.palette.title%",
                    "category": "Python",
                    "when": "editorLangId == python && python.datascience.hascodecells && python.datascience.featureenabled"
                },
                {
                    "command": "python.datascience.showhistorypane",
                    "title": "%python.command.python.datascience.showhistorypane.title%",
                    "category": "Python",
                    "when": "python.datascience.featureenabled && !python.datascience.isinteractiveactive"
                },
                {
                    "command": "python.datascience.runallcells",
                    "title": "%python.command.python.datascience.runallcells.title%",
                    "category": "Python",
                    "when": "python.datascience.hascodecells && python.datascience.featureenabled && python.datascience.ispythonornativeactive"
                },
                {
                    "command": "python.datascience.scrolltocell",
                    "title": "%python.command.python.datascience.scrolltocell.title%",
                    "category": "Python",
                    "when": "false"
                },
                {
                    "command": "python.datascience.debugcell",
                    "title": "%python.command.python.datascience.debugcell.title%",
                    "category": "Python",
                    "when": "config.noExists"
                },
                {
                    "command": "python.datascience.runcell",
                    "title": "%python.command.python.datascience.runcell.title%",
                    "category": "Python",
                    "when": "config.noExists"
                },
                {
                    "command": "python.datascience.runFileInteractive",
                    "title": "%python.command.python.datascience.runFileInteractive.title%",
                    "category": "Python",
                    "when": "editorLangId == python && python.datascience.featureenabled"
                },
                {
                    "command": "python.datascience.debugFileInteractive",
                    "title": "%python.command.python.datascience.debugFileInteractive.title%",
                    "category": "Python",
                    "when": "editorLangId == python && python.datascience.featureenabled"
                },
                {
                    "command": "python.datascience.importnotebook",
                    "title": "%python.command.python.datascience.importnotebook.title%",
                    "category": "Python"
                },
                {
                    "command": "python.datascience.opennotebook",
                    "title": "%python.command.python.datascience.opennotebook.title%",
                    "category": "Python"
                },
                {
                    "command": "python.datascience.exportfileasnotebook",
                    "title": "%python.command.python.datascience.exportfileasnotebook.title%",
                    "category": "Python",
                    "when": "python.datascience.hascodecells && python.datascience.featureenabled && python.datascience.ispythonorinteractiveeactive"
                },
                {
                    "command": "python.datascience.exportfileandoutputasnotebook",
                    "title": "%python.command.python.datascience.exportfileandoutputasnotebook.title%",
                    "category": "Python",
                    "when": "python.datascience.hascodecells && python.datascience.featureenabled && python.datascience.ispythonorinteractiveeactive"
                },
                {
                    "command": "python.datascience.undocells",
                    "title": "%python.command.python.datascience.undocells.title%",
                    "category": "Python",
                    "when": "python.datascience.haveinteractivecells && python.datascience.featureenabled && python.datascience.ispythonorinteractiveeactive"
                },
                {
                    "command": "python.datascience.redocells",
                    "title": "%python.command.python.datascience.redocells.title%",
                    "category": "Python",
                    "when": "python.datascience.haveredoablecells && python.datascience.featureenabled && python.datascience.ispythonorinteractiveornativeeactive"
                },
                {
                    "command": "python.datascience.removeallcells",
                    "title": "%python.command.python.datascience.removeallcells.title%",
                    "category": "Python",
                    "when": "python.datascience.haveinteractivecells && python.datascience.featureenabled && python.datascience.ispythonorinteractiveeactive"
                },
                {
                    "command": "python.datascience.interruptkernel",
                    "title": "%python.command.python.datascience.interruptkernel.title%",
                    "category": "Python",
                    "when": "python.datascience.haveinteractive && python.datascience.featureenabled && python.datascience.ispythonorinteractiveeactive"
                },
                {
                    "command": "python.datascience.restartkernel",
                    "title": "%python.command.python.datascience.restartkernel.title%",
                    "category": "Python",
                    "when": "python.datascience.haveinteractive && python.datascience.featureenabled && python.datascience.ispythonorinteractiveeactive"
                },
                {
                    "command": "python.datascience.notebookeditor.undocells",
                    "title": "%python.command.python.datascience.undocells.title%",
                    "category": "Python",
                    "when": "python.datascience.haveinteractivecells && python.datascience.featureenabled && python.datascience.isnativeactive"
                },
                {
                    "command": "python.datascience.notebookeditor.redocells",
                    "title": "%python.command.python.datascience.redocells.title%",
                    "category": "Python",
                    "when": "python.datascience.havenativeredoablecells && python.datascience.featureenabled && python.datascience.isnativeactive"
                },
                {
                    "command": "python.datascience.notebookeditor.removeallcells",
                    "title": "%python.command.python.datascience.notebookeditor.removeallcells.title%",
                    "category": "Python",
                    "when": "python.datascience.havenativecells && python.datascience.featureenabled && python.datascience.isnativeactive"
                },
                {
                    "command": "python.datascience.notebookeditor.interruptkernel",
                    "title": "%python.command.python.datascience.interruptkernel.title%",
                    "category": "Python",
                    "when": "python.datascience.isnativeactive && python.datascience.featureenabled"
                },
                {
                    "command": "python.datascience.notebookeditor.restartkernel",
                    "title": "%python.command.python.datascience.restartkernel.title%",
                    "category": "Python",
                    "when": "python.datascience.isnativeactive && python.datascience.featureenabled"
                },
                {
                    "command": "python.datascience.notebookeditor.runallcells",
                    "title": "%python.command.python.datascience.notebookeditor.runallcells.title%",
                    "category": "Python",
                    "when": "python.datascience.isnativeactive && python.datascience.featureenabled"
                },
                {
                    "command": "python.datascience.notebookeditor.runselectedcell",
                    "title": "%python.command.python.datascience.notebookeditor.runselectedcell.title%",
                    "category": "Python",
                    "when": "python.datascience.isnativeactive && python.datascience.featureenabled && python.datascience.havecellselected"
                },
                {
                    "command": "python.datascience.notebookeditor.addcellbelow",
                    "title": "%python.command.python.datascience.notebookeditor.addcellbelow.title%",
                    "category": "Python",
                    "when": "python.datascience.isnativeactive && python.datascience.featureenabled"
                },
                {
                    "command": "python.datascience.expandallcells",
                    "title": "%python.command.python.datascience.expandallcells.title%",
                    "category": "Python",
                    "when": "python.datascience.isinteractiveactive && python.datascience.featureenabled"
                },
                {
                    "command": "python.datascience.collapseallcells",
                    "title": "%python.command.python.datascience.collapseallcells.title%",
                    "category": "Python",
                    "when": "python.datascience.isinteractiveactive && python.datascience.featureenabled"
                },
                {
                    "command": "python.datascience.exportoutputasnotebook",
                    "title": "%python.command.python.datascience.exportoutputasnotebook.title%",
                    "category": "Python",
                    "when": "python.datascience.isinteractiveactive && python.datascience.featureenabled"
                },
                {
                    "command": "python.datascience.runcellandallbelow",
                    "category": "Python",
                    "when": "config.noExists"
                },
                {
                    "command": "python.datascience.runallcellsabove",
                    "category": "Python",
                    "when": "config.noExists"
                },
                {
                    "command": "python.datascience.debugcontinue",
                    "category": "Python",
                    "when": "config.noExists"
                },
                {
                    "command": "python.datascience.debugstop",
                    "category": "Python",
                    "when": "config.noExists"
                },
                {
                    "command": "python.datascience.debugstepover",
                    "category": "Python",
                    "when": "config.noExists"
                },
                {
                    "command": "python.datascience.debugcell",
                    "category": "Python",
                    "when": "config.noExists"
                },
                {
                    "command": "python.datascience.addcellbelow",
                    "title": "%python.command.python.datascience.addcellbelow.title%",
                    "category": "Python",
                    "when": "python.datascience.hascodecells && python.datascience.featureenabled && python.datascience.ispythonornativeactive"
                },
                {
                    "command": "python.datascience.createnewnotebook",
                    "title": "%python.command.python.datascience.createnewnotebook.title%",
                    "category": "Python"
                },
                {
                    "command": "python.datascience.runtoline",
                    "category": "Python",
                    "when": "config.noExists"
                },
                {
                    "command": "python.datascience.runfromline",
                    "category": "Python",
                    "when": "config.noExists"
                },
                {
                    "command": "python.datascience.execSelectionInteractive",
                    "category": "Python",
                    "when": "editorLangId == python && python.datascience.featureenabled"
                },
                {
                    "command": "python.datascience.switchKernel",
                    "title": "%DataScience.selectKernel%",
                    "category": "Python",
                    "when": "python.datascience.isnativeactive"
                },
                {
                    "command": "python.datascience.gatherquality",
                    "title": "%DataScience.gatherQuality%",
                    "category": "Python",
                    "when": "false"
                }
            ],
            "view/title": [
                {
                    "command": "python.debugtests",
                    "when": "view == python_tests && !busyTests",
                    "group": "navigation@3"
                },
                {
                    "command": "python.runtests",
                    "when": "view == python_tests && !busyTests",
                    "group": "navigation@1"
                },
                {
                    "command": "python.stopTests",
                    "when": "view == python_tests && busyTests",
                    "group": "navigation@1"
                },
                {
                    "command": "python.discoverTests",
                    "when": "view == python_tests && !busyTests",
                    "group": "navigation@4"
                },
                {
                    "command": "python.discoveringTests",
                    "when": "view == python_tests && discoveringTests",
                    "group": "navigation@4"
                },
                {
                    "command": "python.runFailedTests",
                    "when": "view == python_tests && hasFailedTests && !busyTests",
                    "group": "navigation@2"
                },
                {
                    "command": "python.viewTestOutput",
                    "when": "view == python_tests",
                    "group": "navigation@5"
                }
            ],
            "view/item/context": [
                {
                    "command": "python.runtests",
                    "when": "view == python_tests && viewItem == testWorkspaceFolder && !busyTests",
                    "group": "inline@0"
                },
                {
                    "command": "python.debugtests",
                    "when": "view == python_tests && viewItem == testWorkspaceFolder && !busyTests",
                    "group": "inline@1"
                },
                {
                    "command": "python.discoverTests",
                    "when": "view == python_tests && viewItem == testWorkspaceFolder && !busyTests",
                    "group": "inline@2"
                },
                {
                    "command": "python.openTestNodeInEditor",
                    "when": "view == python_tests && viewItem == function",
                    "group": "inline@2"
                },
                {
                    "command": "python.debugTestNode",
                    "when": "view == python_tests && viewItem == function && !busyTests",
                    "group": "inline@1"
                },
                {
                    "command": "python.runTestNode",
                    "when": "view == python_tests && viewItem == function && !busyTests",
                    "group": "inline@0"
                },
                {
                    "command": "python.openTestNodeInEditor",
                    "when": "view == python_tests && viewItem == file",
                    "group": "inline@2"
                },
                {
                    "command": "python.debugTestNode",
                    "when": "view == python_tests && viewItem == file && !busyTests",
                    "group": "inline@1"
                },
                {
                    "command": "python.runTestNode",
                    "when": "view == python_tests && viewItem == file && !busyTests",
                    "group": "inline@0"
                },
                {
                    "command": "python.openTestNodeInEditor",
                    "when": "view == python_tests && viewItem == suite",
                    "group": "inline@2"
                },
                {
                    "command": "python.debugTestNode",
                    "when": "view == python_tests && viewItem == suite && !busyTests",
                    "group": "inline@1"
                },
                {
                    "command": "python.runTestNode",
                    "when": "view == python_tests && viewItem == suite && !busyTests",
                    "group": "inline@0"
                }
            ]
        },
        "breakpoints": [
            {
                "language": "python"
            },
            {
                "language": "html"
            },
            {
                "language": "jinja"
            }
        ],
        "debuggers": [
            {
                "type": "python",
                "label": "Python",
                "languages": [
                    "python"
                ],
                "program": "./out/client/debugger/debugAdapter/main.js",
                "runtime": "node",
                "variables": {
                    "pickProcess": "python.pickLocalProcess"
                },
                "configurationSnippets": [],
                "configurationAttributes": {
                    "launch": {
                        "properties": {
                            "module": {
                                "type": "string",
                                "description": "Name of the module to be debugged.",
                                "default": ""
                            },
                            "program": {
                                "type": "string",
                                "description": "Absolute path to the program.",
                                "default": "${file}"
                            },
                            "pythonPath": {
                                "type": "string",
                                "description": "Path (fully qualified) to python executable. Defaults to the value in settings.json",
                                "default": "${config:python.pythonPath}"
                            },
                            "args": {
                                "type": "array",
                                "description": "Command line arguments passed to the program",
                                "default": [],
                                "items": {
                                    "type": "string"
                                }
                            },
                            "stopOnEntry": {
                                "type": "boolean",
                                "description": "Automatically stop after launch.",
                                "default": false
                            },
                            "showReturnValue": {
                                "type": "boolean",
                                "description": "Show return value of functions when stepping.",
                                "default": true
                            },
                            "console": {
                                "enum": [
                                    "internalConsole",
                                    "integratedTerminal",
                                    "externalTerminal"
                                ],
                                "description": "Where to launch the debug target: internal console, integrated terminal, or external terminal.",
                                "default": "integratedTerminal"
                            },
                            "cwd": {
                                "type": "string",
                                "description": "Absolute path to the working directory of the program being debugged. Default is the root directory of the file (leave empty).",
                                "default": "${workspaceFolder}"
                            },
                            "env": {
                                "type": "object",
                                "description": "Environment variables defined as a key value pair. Property ends up being the Environment Variable and the value of the property ends up being the value of the Env Variable.",
                                "default": {},
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "envFile": {
                                "type": "string",
                                "description": "Absolute path to a file containing environment variable definitions.",
                                "default": "${workspaceFolder}/.env"
                            },
                            "port": {
                                "type": "number",
                                "description": "Debug port (default is 0, resulting in the use of a dynamic port).",
                                "default": 0
                            },
                            "host": {
                                "type": "string",
                                "description": "IP address of the of the local debug server (default is localhost).",
                                "default": "localhost"
                            },
                            "pathMappings": {
                                "type": "array",
                                "label": "Path mappings.",
                                "items": {
                                    "type": "object",
                                    "label": "Path mapping",
                                    "required": [
                                        "localRoot",
                                        "remoteRoot"
                                    ],
                                    "properties": {
                                        "localRoot": {
                                            "type": "string",
                                            "label": "Local source root.",
                                            "default": "${workspaceFolder}"
                                        },
                                        "remoteRoot": {
                                            "type": "string",
                                            "label": "Remote source root.",
                                            "default": ""
                                        }
                                    }
                                },
                                "default": []
                            },
                            "logToFile": {
                                "type": "boolean",
                                "description": "Enable logging of debugger events to a log file.",
                                "default": false
                            },
                            "redirectOutput": {
                                "type": "boolean",
                                "description": "Redirect output.",
                                "default": true
                            },
                            "justMyCode": {
                                "type": "boolean",
                                "description": "Debug only user-written code.",
                                "default": true
                            },
                            "gevent": {
                                "type": "boolean",
                                "description": "Enable debugging of gevent monkey-patched code.",
                                "default": false
                            },
                            "django": {
                                "type": "boolean",
                                "description": "Django debugging.",
                                "default": false
                            },
                            "jinja": {
                                "enum": [
                                    true,
                                    false,
                                    null
                                ],
                                "description": "Jinja template debugging (e.g. Flask).",
                                "default": null
                            },
                            "sudo": {
                                "type": "boolean",
                                "description": "Running debug program under elevated permissions (on Unix).",
                                "default": false
                            },
                            "pyramid": {
                                "type": "boolean",
                                "description": "Whether debugging Pyramid applications",
                                "default": false
                            },
                            "subProcess": {
                                "type": "boolean",
                                "description": "Whether to enable Sub Process debugging",
                                "default": false
                            }
                        }
                    },
                    "test": {
                        "properties": {
                            "pythonPath": {
                                "type": "string",
                                "description": "Path (fully qualified) to python executable. Defaults to the value in settings.json",
                                "default": "${config:python.pythonPath}"
                            },
                            "stopOnEntry": {
                                "type": "boolean",
                                "description": "Automatically stop after launch.",
                                "default": false
                            },
                            "showReturnValue": {
                                "type": "boolean",
                                "description": "Show return value of functions when stepping.",
                                "default": true
                            },
                            "console": {
                                "enum": [
                                    "internalConsole",
                                    "integratedTerminal",
                                    "externalTerminal"
                                ],
                                "description": "Where to launch the debug target: internal console, integrated terminal, or external terminal.",
                                "default": "internalConsole"
                            },
                            "cwd": {
                                "type": "string",
                                "description": "Absolute path to the working directory of the program being debugged. Default is the root directory of the file (leave empty).",
                                "default": "${workspaceFolder}"
                            },
                            "env": {
                                "type": "object",
                                "description": "Environment variables defined as a key value pair. Property ends up being the Environment Variable and the value of the property ends up being the value of the Env Variable.",
                                "default": {},
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "envFile": {
                                "type": "string",
                                "description": "Absolute path to a file containing environment variable definitions.",
                                "default": "${workspaceFolder}/.env"
                            },
                            "redirectOutput": {
                                "type": "boolean",
                                "description": "Redirect output.",
                                "default": true
                            },
                            "justMyCode": {
                                "type": "boolean",
                                "description": "Debug only user-written code.",
                                "default": true
                            }
                        }
                    },
                    "attach": {
                        "properties": {
                            "connect": {
                                "type": "object",
                                "label": "Attach by connecting to debugpy over a socket.",
                                "properties": {
                                    "port": {
                                        "type": "number",
                                        "description": "Port to connect to."
                                    },
                                    "host": {
                                        "type": "string",
                                        "description": "Hostname or IP address to connect to.",
                                        "default": "127.0.0.1"
                                    }
                                },
                                "required": [
                                    "port"
                                ]
                            },
                            "listen": {
                                "type": "object",
                                "label": "Attach by listening for incoming socket connection from debugpy",
                                "properties": {
                                    "port": {
                                        "type": "number",
                                        "description": "Port to listen on."
                                    },
                                    "host": {
                                        "type": "string",
                                        "description": "Hostname or IP address of the interface to listen on.",
                                        "default": "127.0.0.1"
                                    }
                                },
                                "required": [
                                    "port"
                                ]
                            },
                            "port": {
                                "type": "number",
                                "description": "Port to connect to."
                            },
                            "host": {
                                "type": "string",
                                "description": "Hostname or IP address to connect to.",
                                "default": "127.0.0.1"
                            },
                            "pathMappings": {
                                "type": "array",
                                "label": "Path mappings.",
                                "items": {
                                    "type": "object",
                                    "label": "Path mapping",
                                    "required": [
                                        "localRoot",
                                        "remoteRoot"
                                    ],
                                    "properties": {
                                        "localRoot": {
                                            "type": "string",
                                            "label": "Local source root.",
                                            "default": "${workspaceFolder}"
                                        },
                                        "remoteRoot": {
                                            "type": "string",
                                            "label": "Remote source root.",
                                            "default": ""
                                        }
                                    }
                                },
                                "default": []
                            },
                            "logToFile": {
                                "type": "boolean",
                                "description": "Enable logging of debugger events to a log file.",
                                "default": false
                            },
                            "redirectOutput": {
                                "type": "boolean",
                                "description": "Redirect output.",
                                "default": true
                            },
                            "justMyCode": {
                                "type": "boolean",
                                "description": "Debug only user-written code.",
                                "default": true
                            },
                            "django": {
                                "type": "boolean",
                                "description": "Django debugging.",
                                "default": false
                            },
                            "jinja": {
                                "enum": [
                                    true,
                                    false,
                                    null
                                ],
                                "description": "Jinja template debugging (e.g. Flask).",
                                "default": null
                            },
                            "subProcess": {
                                "type": "boolean",
                                "description": "Whether to enable Sub Process debugging",
                                "default": false
                            },
                            "showReturnValue": {
                                "type": "boolean",
                                "description": "Show return value of functions when stepping.",
                                "default": true
                            },
                            "processId": {
                                "anyOf": [
                                    {
                                        "enum": [
                                            "${command:pickProcess}"
                                        ],
                                        "description": "Use process picker to select a process to attach, or Process ID as integer.",
                                        "default": "${command:pickProcess}"
                                    },
                                    {
                                        "type": "integer",
                                        "description": "ID of the local process to attach to."
                                    }
                                ]
                            }
                        }
                    }
                }
            }
        ],
        "configuration": {
            "type": "object",
            "title": "Python",
            "properties": {
                "python.diagnostics.sourceMapsEnabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable source map support for meaningful stack traces in error logs.",
                    "scope": "application"
                },
                "python.autoComplete.addBrackets": {
                    "type": "boolean",
                    "default": false,
                    "description": "Automatically add brackets for functions.",
                    "scope": "resource"
                },
                "python.autoComplete.extraPaths": {
                    "type": "array",
                    "default": [],
                    "description": "List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.",
                    "scope": "resource"
                },
                "python.autoComplete.showAdvancedMembers": {
                    "type": "boolean",
                    "default": true,
                    "description": "Controls appearance of methods with double underscores in the completion list.",
                    "scope": "resource"
                },
                "python.autoComplete.typeshedPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [],
                    "description": "Specifies paths to local typeshed repository clone(s) for the Python language server.",
                    "scope": "resource"
                },
                "python.autoUpdateLanguageServer": {
                    "type": "boolean",
                    "default": true,
                    "description": "Automatically update the language server.",
                    "scope": "application"
                },
                "python.experiments.enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enables/disables A/B tests.",
                    "scope": "machine"
                },
                "python.defaultInterpreterPath": {
                    "type": "string",
                    "default": "python",
                    "description": "Path to Python, you can use a custom version of Python by modifying this setting to include the full path.",
                    "scope": "machine"
                },
                "python.experiments.optInto": {
                    "type": "array",
                    "default": [],
                    "items": {
                        "enum": [
                            "LS - enabled",
                            "AlwaysDisplayTestExplorer - experiment",
                            "ShowExtensionSurveyPrompt - enabled",
                            "DebugAdapterFactory - experiment",
                            "PtvsdWheels37 - experiment",
                            "Reload - experiment",
                            "AA_testing - experiment",
                            "WebHostNotebook - experiment",
                            "LocalZMQKernel - experiment",
                            "UseTerminalToGetActivatedEnvVars - experiment",
                            "CollectLSRequestTiming - experiment",
                            "CollectNodeLSRequestTiming - experiment",
                            "DeprecatePythonPath - experiment",
                            "All"
                        ]
                    },
                    "description": "List of experiment to opt into. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.",
                    "scope": "machine"
                },
                "python.experiments.optOutFrom": {
                    "type": "array",
                    "default": [],
                    "items": {
                        "enum": [
                            "LS - enabled",
                            "AlwaysDisplayTestExplorer - experiment",
                            "ShowExtensionSurveyPrompt - enabled",
                            "DebugAdapterFactory - experiment",
                            "PtvsdWheels37 - experiment",
                            "Reload - experiment",
                            "AA_testing - experiment",
                            "WebHostNotebook - experiment",
                            "LocalZMQKernel - experiment",
                            "UseTerminalToGetActivatedEnvVars - experiment",
                            "CollectLSRequestTiming - experiment",
                            "CollectNodeLSRequestTiming - experiment",
                            "DeprecatePythonPath - experiment",
                            "All"
                        ]
                    },
                    "description": "List of experiment to opt out of. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.",
                    "scope": "machine"
                },
                "python.dataScience.allowImportFromNotebook": {
                    "type": "boolean",
                    "default": true,
                    "description": "Allows a user to import a jupyter notebook into a python file anytime one is opened.",
                    "scope": "resource"
                },
                "python.dataScience.widgetScriptSources": {
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "string",
                        "enum": [
                            "jsdelivr.com",
                            "unpkg.com"
                        ],
                        "enumDescriptions": [
                            "Loads widget (javascript) scripts from https://www.jsdelivr.com/",
                            "Loads widget (javascript) scripts from https://unpkg.com/"
                        ]
                    },
                    "uniqueItems": true,
                    "markdownDescription": "Defines the location and order of the sources where scripts files for Widgets are downloaded from (e.g. ipywidgest, bqplot, beakerx, ipyleaflet, etc). Not selecting any of these could result in widgets not rendering or function correctly. See [here](https://aka.ms/PVSCIPyWidgets) for more information. Once updated you will need to restart the Kernel.",
                    "scope": "machine"
                },
                "python.dataScience.askForLargeDataFrames": {
                    "type": "boolean",
                    "default": true,
                    "description": "Warn the user before trying to open really large data frames.",
                    "scope": "application"
                },
                "python.dataScience.askForKernelRestart": {
                    "type": "boolean",
                    "default": true,
                    "description": "Warn the user before restarting a kernel.",
                    "scope": "application"
                },
                "python.dataScience.enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable the experimental data science features in the python extension.",
                    "scope": "resource"
                },
                "python.dataScience.exportWithOutputEnabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable exporting a python file into a jupyter notebook and run all cells when doing so.",
                    "scope": "resource"
                },
                "python.dataScience.jupyterLaunchTimeout": {
                    "type": "number",
                    "default": 60000,
                    "description": "Amount of time (in ms) to wait for the Jupyter Notebook server to start.",
                    "scope": "resource"
                },
                "python.dataScience.jupyterLaunchRetries": {
                    "type": "number",
                    "default": 3,
                    "description": "Number of times to attempt to connect to the Jupyter Notebook",
                    "scope": "resource"
                },
                "python.dataScience.jupyterServerURI": {
                    "type": "string",
                    "default": "local",
                    "description": "When a Notebook Editor or Interactive Window session is started, create the kernel on the specified Jupyter server. Select 'local' to create a new Jupyter server on this local machine.",
                    "scope": "resource"
                },
                "python.dataScience.jupyterCommandLineArguments": {
                    "type": "array",
                    "default": [],
                    "description": "When a Notebook Editor or Interactive Window Jupyter server is started, these arguments will be passed to it. By default this list is generated by the Python Extension.",
                    "scope": "resource"
                },
                "python.dataScience.notebookFileRoot": {
                    "type": "string",
                    "default": "${fileDirname}",
                    "description": "Set the root directory for loading files for the Python Interactive window.",
                    "scope": "resource"
                },
                "python.dataScience.searchForJupyter": {
                    "type": "boolean",
                    "default": true,
                    "description": "Search all installed Python interpreters for a Jupyter installation when starting the Python Interactive window",
                    "scope": "resource"
                },
                "python.dataScience.changeDirOnImportExport": {
                    "type": "boolean",
                    "default": false,
                    "description": "When importing or exporting a Jupyter Notebook add a directory change command to allow relative path loading to work.",
                    "scope": "resource"
                },
                "python.dataScience.useDefaultConfigForJupyter": {
                    "type": "boolean",
                    "default": true,
                    "description": "When running Jupyter locally, create a default empty Jupyter config for the Python Interactive window",
                    "scope": "resource"
                },
                "python.dataScience.jupyterInterruptTimeout": {
                    "type": "number",
                    "default": 10000,
                    "description": "Amount of time (in ms) to wait for an interrupt before asking to restart the Jupyter kernel.",
                    "scope": "resource"
                },
                "python.dataScience.allowInput": {
                    "type": "boolean",
                    "default": true,
                    "description": "Allow the inputting of python code directly into the Python Interactive window"
                },
                "python.dataScience.showCellInputCode": {
                    "type": "boolean",
                    "default": true,
                    "description": "Show cell input code.",
                    "scope": "resource"
                },
                "python.dataScience.collapseCellInputCodeByDefault": {
                    "type": "boolean",
                    "default": true,
                    "description": "Collapse cell input code by default.",
                    "scope": "resource"
                },
                "python.dataScience.maxOutputSize": {
                    "type": "number",
                    "default": 400,
                    "description": "Maximum size (in pixels) of text output in the Python Interactive window and Notebook Editor before a scrollbar appears. First enable scrolling for cell outputs in settings.",
                    "scope": "resource"
                },
                "python.dataScience.enableScrollingForCellOutputs": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enables scrolling for large cell outputs.",
                    "scope": "resource"
                },
                "python.dataScience.errorBackgroundColor": {
                    "type": "string",
                    "default": "#FFFFFF",
                    "description": "Background color (in hex) for exception messages in the Python Interactive window.",
                    "scope": "resource",
                    "deprecationMessage": "No longer necessary as the theme colors are used for error messages"
                },
                "python.dataScience.sendSelectionToInteractiveWindow": {
                    "type": "boolean",
                    "default": false,
                    "description": "Determines if selected code in a python file will go to the terminal or the Python Interactive window when hitting shift+enter",
                    "scope": "resource"
                },
                "python.dataScience.showJupyterVariableExplorer": {
                    "type": "boolean",
                    "default": true,
                    "description": "Show the variable explorer in the Python Interactive window.",
                    "deprecationMessage": "This setting no longer applies. It is ignored.",
                    "scope": "resource"
                },
                "python.dataScience.variableExplorerExclude": {
                    "type": "string",
                    "default": "module;function;builtin_function_or_method",
                    "description": "Types to exclude from showing in the Python Interactive variable explorer",
                    "scope": "resource"
                },
                "python.dataScience.codeRegularExpression": {
                    "type": "string",
                    "default": "^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",
                    "description": "Regular expression used to identify code cells. All code until the next match is considered part of this cell. \nDefaults to '^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])' if left blank",
                    "scope": "resource"
                },
                "python.dataScience.defaultCellMarker": {
                    "type": "string",
                    "default": "# %%",
                    "description": "Cell marker used for delineating a cell in a python file.",
                    "scope": "resource"
                },
                "python.dataScience.markdownRegularExpression": {
                    "type": "string",
                    "default": "^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)",
                    "description": "Regular expression used to identify markdown cells. All comments after this expression are considered part of the markdown. \nDefaults to '^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)' if left blank",
                    "scope": "resource"
                },
                "python.dataScience.allowLiveShare": {
                    "type": "boolean",
                    "default": true,
                    "description": "Allow the Python Interactive window to be shared during a Live Share session",
                    "scope": "resource"
                },
                "python.dataScience.ignoreVscodeTheme": {
                    "type": "boolean",
                    "default": false,
                    "description": "Don't use the VS Code theme in the Python Interactive window (requires reload of VS Code). This forces the Python Interactive window to use 'Light +(default light)' and disables matplotlib defaults.",
                    "scope": "resource"
                },
                "python.dataScience.themeMatplotlibPlots": {
                    "type": "boolean",
                    "default": false,
                    "description": "In the Python Interactive window and Notebook Editor theme matplotlib outputs to match the VS Code editor theme.",
                    "scope": "resource"
                },
                "python.dataScience.liveShareConnectionTimeout": {
                    "type": "number",
                    "default": 1000,
                    "description": "Amount of time to wait for guest connections to verify they have the Python extension installed.",
                    "scope": "application"
                },
                "python.dataScience.decorateCells": {
                    "type": "boolean",
                    "default": true,
                    "description": "Draw a highlight behind the currently active cell.",
                    "scope": "resource"
                },
                "python.dataScience.enableCellCodeLens": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enables code lens for 'cells' in a python file.",
                    "scope": "resource"
                },
                "python.dataScience.enableAutoMoveToNextCell": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enables moving to the next cell when clicking on a 'Run Cell' code lens.",
                    "scope": "resource"
                },
                "python.dataScience.autoPreviewNotebooksInInteractivePane": {
                    "type": "boolean",
                    "deprecationMessage": "No longer supported. Notebooks open directly in their own editor now.",
                    "default": false,
                    "description": "When opening ipynb files, automatically preview the contents in the Python Interactive window.",
                    "scope": "resource"
                },
                "python.dataScience.useNotebookEditor": {
                    "type": "boolean",
                    "default": true,
                    "description": "Automatically open .ipynb files in the Notebook Editor.",
                    "scope": "resource"
                },
                "python.dataScience.allowUnauthorizedRemoteConnection": {
                    "type": "boolean",
                    "default": false,
                    "description": "Allow for connecting the Python Interactive window to a https Jupyter server that does not have valid certificates. This can be a security risk, so only use for known and trusted servers.",
                    "scope": "resource"
                },
                "python.dataScience.enablePlotViewer": {
                    "type": "boolean",
                    "default": true,
                    "description": "Modify plot output so that it can be expanded into a plot viewer window.",
                    "scope": "resource"
                },
                "python.dataScience.enableGather": {
                    "type": "boolean",
                    "default": true,
                    "description": "Python Insiders Only: Enable experimental gather feature for executed cells. For a gathered cell, that cell and only the code it depends on will be exported to a new notebook.",
                    "scope": "resource"
                },
                "python.dataScience.gatherToScript": {
                    "type": "boolean",
                    "default": false,
                    "description": "Python Insiders Only: If experimental gather feature is enabled, gather code to a python script rather than a notebook.",
                    "scope": "resource"
                },
                "python.dataScience.gatherSpecPath": {
                    "type": "string",
                    "default": "",
                    "description": "Python Insiders Only: If experimental gather feature is enabled, this setting specifies a folder that contains additional or replacement spec files used for analysis.",
                    "scope": "resource"
                },
                "python.dataScience.codeLenses": {
                    "type": "string",
                    "default": "python.datascience.runcell,  python.datascience.runallcellsabove, python.datascience.debugcell",
                    "description": "Set of commands to put as code lens above a cell. Defaults to 'python.datascience.runcell,  python.datascience.runallcellsabove, python.datascience.debugcell'",
                    "scope": "resource"
                },
                "python.dataScience.debugCodeLenses": {
                    "type": "string",
                    "default": "python.datascience.debugcontinue, python.datascience.debugstop, python.datascience.debugstepover",
                    "description": "Set of debug commands to put as code lens above a cell while debugging.",
                    "scope": "resource"
                },
                "python.dataScience.ptvsdDistPath": {
                    "type": "string",
                    "default": "",
                    "description": "Path to ptvsd experimental bits for debugging cells.",
                    "scope": "resource"
                },
                "python.dataScience.stopOnFirstLineWhileDebugging": {
                    "type": "boolean",
                    "default": true,
                    "description": "When debugging a cell, stop on the first line.",
                    "scope": "resource"
                },
                "python.dataScience.remoteDebuggerPort": {
                    "type": "number",
                    "default": -1,
                    "description": "When debugging a cell, open this port on the remote box. If -1 is specified, a random port between 8889 and 9000 will be attempted.",
                    "scope": "resource"
                },
                "python.dataScience.disableJupyterAutoStart": {
                    "type": "boolean",
                    "default": false,
                    "description": "When true, disables Jupyter from being automatically started for you. You must instead run a cell to start Jupyter.",
                    "scope": "resource"
                },
                "python.dataScience.textOutputLimit": {
                    "type": "number",
                    "default": 20000,
                    "description": "Limit the amount of text in Python Interactive cell text output to this value. 0 to allow any amount of characters.",
                    "scope": "resource"
                },
                "python.dataScience.colorizeInputBox": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether or not to use the theme's peek color as the background for the input box.",
                    "scope": "resource"
                },
                "python.dataScience.stopOnError": {
                    "type": "boolean",
                    "default": true,
                    "description": "Stop running cells if a cell throws an exception.",
                    "scope": "resource"
                },
                "python.dataScience.addGotoCodeLenses": {
                    "type": "boolean",
                    "default": true,
                    "description": "After running a cell, add a 'Goto' code lens on the cell. Note, disabling all code lenses disables this code lens as well.",
                    "scope": "resource"
                },
                "python.dataScience.variableQueries": {
                    "type": "array",
                    "description": "Language to query mapping for returning the list of active variables in a Jupyter kernel. Used by the Variable Explorer in both the Interactive Window and Notebooks. Example: \n'[\n{\n   \"language\": \"python\",\n   \"query\": \"%who_ls\",\n  \"parseExpr\": \"'(\\\\w+)'\"\n}\n]'",
                    "scope": "machine",
                    "examples": [
                        [
                            {
                                "language": "python",
                                "query": "_rwho_ls = %who_ls\\nprint(_rwho_ls)",
                                "parseExpr": "'(\\w+)'"
                            },
                            {
                                "language": "julia",
                                "query": "whos",
                                "parseExpr": "'(\\w+)'"
                            }
                        ]
                    ]
                },
                "python.disableInstallationCheck": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to check if Python is installed (also warn when using the macOS-installed Python).",
                    "scope": "resource"
                },
                "python.envFile": {
                    "type": "string",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "default": "${workspaceFolder}/.env",
                    "scope": "resource"
                },
                "python.formatting.autopep8Args": {
                    "type": "array",
                    "description": "Arguments passed in. Each argument is a separate item in the array.",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "scope": "resource"
                },
                "python.formatting.autopep8Path": {
                    "type": "string",
                    "default": "autopep8",
                    "description": "Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.",
                    "scope": "resource"
                },
                "python.formatting.provider": {
                    "type": "string",
                    "default": "autopep8",
                    "description": "Provider for formatting. Possible options include 'autopep8', 'black', and 'yapf'.",
                    "enum": [
                        "autopep8",
                        "black",
                        "yapf",
                        "none"
                    ],
                    "scope": "resource"
                },
                "python.formatting.blackArgs": {
                    "type": "array",
                    "description": "Arguments passed in. Each argument is a separate item in the array.",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "scope": "resource"
                },
                "python.formatting.blackPath": {
                    "type": "string",
                    "default": "black",
                    "description": "Path to Black, you can use a custom version of Black by modifying this setting to include the full path.",
                    "scope": "resource"
                },
                "python.formatting.yapfArgs": {
                    "type": "array",
                    "description": "Arguments passed in. Each argument is a separate item in the array.",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "scope": "resource"
                },
                "python.formatting.yapfPath": {
                    "type": "string",
                    "default": "yapf",
                    "description": "Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.",
                    "scope": "resource"
                },
                "python.globalModuleInstallation": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to install Python modules globally when not using an environment.",
                    "scope": "resource"
                },
                "python.jediEnabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enables Jedi as IntelliSense engine instead of Microsoft Python Analysis Engine.",
                    "scope": "resource"
                },
                "python.jediMemoryLimit": {
                    "type": "number",
                    "default": 0,
                    "description": "Memory limit for the Jedi completion engine in megabytes. Zero (default) means 1024 MB. -1 means unlimited (disable memory limit check)",
                    "scope": "resource"
                },
                "python.jediPath": {
                    "type": "string",
                    "default": "",
                    "description": "Path to directory containing the Jedi library (this path will contain the 'Jedi' sub directory).",
                    "scope": "resource"
                },
                "python.languageServer": {
                    "type": "string",
                    "enum": [
                        "Jedi",
                        "Microsoft",
                        "None"
                    ],
                    "default": "Microsoft",
                    "description": "Defines type of the language server.",
                    "scope": "resource"
                },
                "python.analysis.openFilesOnly": {
                    "type": "boolean",
                    "default": true,
                    "description": "Only show errors and warnings for open files rather than for the entire workspace.",
                    "scope": "resource"
                },
                "python.analysis.diagnosticPublishDelay": {
                    "type": "integer",
                    "default": 1000,
                    "description": "Delay before diagnostic messages are transferred to the problems list (in milliseconds).",
                    "scope": "resource"
                },
                "python.analysis.errors": {
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "description": "List of diagnostics messages to be shown as errors.",
                    "scope": "resource"
                },
                "python.analysis.warnings": {
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "description": "List of diagnostics messages to be shown as warnings.",
                    "scope": "resource"
                },
                "python.analysis.information": {
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "description": "List of diagnostics messages to be shown as information.",
                    "scope": "resource"
                },
                "python.analysis.disabled": {
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "description": "List of suppressed diagnostic messages.",
                    "scope": "resource"
                },
                "python.analysis.typeshedPaths": {
                    "type": "array",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "description": "Paths to Typeshed stub folders. Default is Typeshed installed with the language server. Change requires restart.",
                    "scope": "resource"
                },
                "python.analysis.cacheFolderPath": {
                    "type": "string",
                    "description": "Path to a writable folder where analyzer can cache its data. Change requires restart.",
                    "scope": "resource"
                },
                "python.analysis.memory.keepLibraryAst": {
                    "type": "boolean",
                    "default": false,
                    "description": "Allows code analysis to keep parser trees in memory. Increases memory consumption but may improve performance with large library analysis.",
                    "scope": "resource"
                },
                "python.analysis.memory.keepLibraryLocalVariables": {
                    "type": "boolean",
                    "default": false,
                    "description": "Allows code analysis to keep library function local variables. Allows code navigation in Python libraries function bodies. Increases memory consumption.",
                    "scope": "resource"
                },
                "python.analysis.logLevel": {
                    "type": "string",
                    "enum": [
                        "Error",
                        "Warning",
                        "Information",
                        "Trace"
                    ],
                    "default": "Error",
                    "description": "Defines type of log messages language server writes into the output window.",
                    "scope": "resource"
                },
                "python.analysis.symbolsHierarchyDepthLimit": {
                    "type": "integer",
                    "default": 10,
                    "description": "Limits depth of the symbol tree in the document outline.",
                    "scope": "resource"
                },
                "python.analysis.cachingLevel": {
                    "type": "string",
                    "enum": [
                        "Default",
                        "None",
                        "System",
                        "Library"
                    ],
                    "default": "Default",
                    "description": "Defines which types of modules get their analysis cached.",
                    "scope": "resource"
                },
                "python.linting.enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to lint Python files.",
                    "scope": "resource"
                },
                "python.linting.flake8Args": {
                    "type": "array",
                    "description": "Arguments passed in. Each argument is a separate item in the array.",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "scope": "resource"
                },
                "python.linting.flake8CategorySeverity.E": {
                    "type": "string",
                    "default": "Error",
                    "description": "Severity of Flake8 message type 'E'.",
                    "enum": [
                        "Hint",
                        "Error",
                        "Information",
                        "Warning"
                    ],
                    "scope": "resource"
                },
                "python.linting.flake8CategorySeverity.F": {
                    "type": "string",
                    "default": "Error",
                    "description": "Severity of Flake8 message type 'F'.",
                    "enum": [
                        "Hint",
                        "Error",
                        "Information",
                        "Warning"
                    ],
                    "scope": "resource"
                },
                "python.linting.flake8CategorySeverity.W": {
                    "type": "string",
                    "default": "Warning",
                    "description": "Severity of Flake8 message type 'W'.",
                    "enum": [
                        "Hint",
                        "Error",
                        "Information",
                        "Warning"
                    ],
                    "scope": "resource"
                },
                "python.linting.flake8Enabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to lint Python files using flake8",
                    "scope": "resource"
                },
                "python.linting.flake8Path": {
                    "type": "string",
                    "default": "flake8",
                    "description": "Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.",
                    "scope": "resource"
                },
                "python.linting.ignorePatterns": {
                    "type": "array",
                    "description": "Patterns used to exclude files or folders from being linted.",
                    "default": [
                        ".vscode/*.py",
                        "**/site-packages/**/*.py"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "scope": "resource"
                },
                "python.linting.lintOnSave": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to lint Python files when saved.",
                    "scope": "resource"
                },
                "python.linting.maxNumberOfProblems": {
                    "type": "number",
                    "default": 100,
                    "description": "Controls the maximum number of problems produced by the server.",
                    "scope": "resource"
                },
                "python.linting.banditArgs": {
                    "type": "array",
                    "description": "Arguments passed in. Each argument is a separate item in the array.",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "scope": "resource"
                },
                "python.linting.banditEnabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to lint Python files using bandit.",
                    "scope": "resource"
                },
                "python.linting.banditPath": {
                    "type": "string",
                    "default": "bandit",
                    "description": "Path to bandit, you can use a custom version of bandit by modifying this setting to include the full path.",
                    "scope": "resource"
                },
                "python.linting.mypyArgs": {
                    "type": "array",
                    "description": "Arguments passed in. Each argument is a separate item in the array.",
                    "default": [
                        "--ignore-missing-imports",
                        "--follow-imports=silent",
                        "--show-column-numbers"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "scope": "resource"
                },
                "python.linting.mypyCategorySeverity.error": {
                    "type": "string",
                    "default": "Error",
                    "description": "Severity of Mypy message type 'Error'.",
                    "enum": [
                        "Hint",
                        "Error",
                        "Information",
                        "Warning"
                    ],
                    "scope": "resource"
                },
                "python.linting.mypyCategorySeverity.note": {
                    "type": "string",
                    "default": "Information",
                    "description": "Severity of Mypy message type 'Note'.",
                    "enum": [
                        "Hint",
                        "Error",
                        "Information",
                        "Warning"
                    ],
                    "scope": "resource"
                },
                "python.linting.mypyEnabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to lint Python files using mypy.",
                    "scope": "resource"
                },
                "python.linting.mypyPath": {
                    "type": "string",
                    "default": "mypy",
                    "description": "Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.",
                    "scope": "resource"
                },
                "python.linting.pycodestyleArgs": {
                    "type": "array",
                    "description": "Arguments passed in. Each argument is a separate item in the array.",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "scope": "resource"
                },
                "python.linting.pycodestyleCategorySeverity.E": {
                    "type": "string",
                    "default": "Error",
                    "description": "Severity of pycodestyle message type 'E'.",
                    "enum": [
                        "Hint",
                        "Error",
                        "Information",
                        "Warning"
                    ],
                    "scope": "resource"
                },
                "python.linting.pycodestyleCategorySeverity.W": {
                    "type": "string",
                    "default": "Warning",
                    "description": "Severity of pycodestyle message type 'W'.",
                    "enum": [
                        "Hint",
                        "Error",
                        "Information",
                        "Warning"
                    ],
                    "scope": "resource"
                },
                "python.linting.pycodestyleEnabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to lint Python files using pycodestyle",
                    "scope": "resource"
                },
                "python.linting.pycodestylePath": {
                    "type": "string",
                    "default": "pycodestyle",
                    "description": "Path to pycodestyle, you can use a custom version of pycodestyle by modifying this setting to include the full path.",
                    "scope": "resource"
                },
                "python.linting.prospectorArgs": {
                    "type": "array",
                    "description": "Arguments passed in. Each argument is a separate item in the array.",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "scope": "resource"
                },
                "python.linting.prospectorEnabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to lint Python files using prospector.",
                    "scope": "resource"
                },
                "python.linting.prospectorPath": {
                    "type": "string",
                    "default": "prospector",
                    "description": "Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.",
                    "scope": "resource"
                },
                "python.linting.pydocstyleArgs": {
                    "type": "array",
                    "description": "Arguments passed in. Each argument is a separate item in the array.",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "scope": "resource"
                },
                "python.linting.pydocstyleEnabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to lint Python files using pydocstyle",
                    "scope": "resource"
                },
                "python.linting.pydocstylePath": {
                    "type": "string",
                    "default": "pydocstyle",
                    "description": "Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.",
                    "scope": "resource"
                },
                "python.linting.pylamaArgs": {
                    "type": "array",
                    "description": "Arguments passed in. Each argument is a separate item in the array.",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "scope": "resource"
                },
                "python.linting.pylamaEnabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to lint Python files using pylama.",
                    "scope": "resource"
                },
                "python.linting.pylamaPath": {
                    "type": "string",
                    "default": "pylama",
                    "description": "Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.",
                    "scope": "resource"
                },
                "python.linting.pylintArgs": {
                    "type": "array",
                    "description": "Arguments passed in. Each argument is a separate item in the array.",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "scope": "resource"
                },
                "python.linting.pylintCategorySeverity.convention": {
                    "type": "string",
                    "default": "Information",
                    "description": "Severity of Pylint message type 'Convention/C'.",
                    "enum": [
                        "Hint",
                        "Error",
                        "Information",
                        "Warning"
                    ],
                    "scope": "resource"
                },
                "python.linting.pylintCategorySeverity.error": {
                    "type": "string",
                    "default": "Error",
                    "description": "Severity of Pylint message type 'Error/E'.",
                    "enum": [
                        "Hint",
                        "Error",
                        "Information",
                        "Warning"
                    ],
                    "scope": "resource"
                },
                "python.linting.pylintCategorySeverity.fatal": {
                    "type": "string",
                    "default": "Error",
                    "description": "Severity of Pylint message type 'Fatal/F'.",
                    "enum": [
                        "Hint",
                        "Error",
                        "Information",
                        "Warning"
                    ],
                    "scope": "resource"
                },
                "python.linting.pylintCategorySeverity.refactor": {
                    "type": "string",
                    "default": "Hint",
                    "description": "Severity of Pylint message type 'Refactor/R'.",
                    "enum": [
                        "Hint",
                        "Error",
                        "Information",
                        "Warning"
                    ],
                    "scope": "resource"
                },
                "python.linting.pylintCategorySeverity.warning": {
                    "type": "string",
                    "default": "Warning",
                    "description": "Severity of Pylint message type 'Warning/W'.",
                    "enum": [
                        "Hint",
                        "Error",
                        "Information",
                        "Warning"
                    ],
                    "scope": "resource"
                },
                "python.linting.pylintEnabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to lint Python files using pylint.",
                    "scope": "resource"
                },
                "python.linting.pylintPath": {
                    "type": "string",
                    "default": "pylint",
                    "description": "Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.",
                    "scope": "resource"
                },
                "python.linting.pylintUseMinimalCheckers": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to run Pylint with minimal set of rules.",
                    "scope": "resource"
                },
                "python.pythonPath": {
                    "type": "string",
                    "default": "python",
                    "description": "Path to Python, you can use a custom version of Python by modifying this setting to include the full path.",
                    "scope": "resource"
                },
                "python.condaPath": {
                    "type": "string",
                    "default": "",
                    "description": "Path to the conda executable to use for activation (version 4.4+).",
                    "scope": "resource"
                },
                "python.pipenvPath": {
                    "type": "string",
                    "default": "pipenv",
                    "description": "Path to the pipenv executable to use for activation.",
                    "scope": "resource"
                },
                "python.poetryPath": {
                    "type": "string",
                    "default": "poetry",
                    "description": "Path to the poetry executable.",
                    "scope": "resource"
                },
                "python.sortImports.args": {
                    "type": "array",
                    "description": "Arguments passed in. Each argument is a separate item in the array.",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "scope": "resource"
                },
                "python.sortImports.path": {
                    "type": "string",
                    "description": "Path to isort script, default using inner version",
                    "default": "",
                    "scope": "resource"
                },
                "python.terminal.activateEnvironment": {
                    "type": "boolean",
                    "default": true,
                    "description": "Activate Python Environment in Terminal created using the Extension.",
                    "scope": "resource"
                },
                "python.terminal.executeInFileDir": {
                    "type": "boolean",
                    "default": false,
                    "description": "When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.",
                    "scope": "resource"
                },
                "python.terminal.launchArgs": {
                    "type": "array",
                    "default": [],
                    "description": "Python launch arguments to use when executing a file in the terminal.",
                    "scope": "resource"
                },
                "python.terminal.activateEnvInCurrentTerminal": {
                    "type": "boolean",
                    "default": false,
                    "description": "Activate Python Environment in the current Terminal on load of the Extension.",
                    "scope": "resource"
                },
                "python.testing.cwd": {
                    "type": "string",
                    "default": null,
                    "description": "Optional working directory for tests.",
                    "scope": "resource"
                },
                "python.testing.debugPort": {
                    "type": "number",
                    "default": 3000,
                    "description": "Port number used for debugging of tests.",
                    "scope": "resource"
                },
                "python.testing.nosetestArgs": {
                    "type": "array",
                    "description": "Arguments passed in. Each argument is a separate item in the array.",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "scope": "resource"
                },
                "python.testing.nosetestsEnabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable testing using nosetests.",
                    "scope": "resource"
                },
                "python.testing.nosetestPath": {
                    "type": "string",
                    "default": "nosetests",
                    "description": "Path to nosetests, you can use a custom version of nosetests by modifying this setting to include the full path.",
                    "scope": "resource"
                },
                "python.testing.promptToConfigure": {
                    "type": "boolean",
                    "default": true,
                    "description": "Prompt to configure a test framework if potential tests directories are discovered.",
                    "scope": "resource"
                },
                "python.testing.pytestArgs": {
                    "type": "array",
                    "description": "Arguments passed in. Each argument is a separate item in the array.",
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "scope": "resource"
                },
                "python.testing.pytestEnabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable testing using pytest.",
                    "scope": "resource"
                },
                "python.testing.pytestPath": {
                    "type": "string",
                    "default": "pytest",
                    "description": "Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.",
                    "scope": "resource"
                },
                "python.testing.unittestArgs": {
                    "type": "array",
                    "description": "Arguments passed in. Each argument is a separate item in the array.",
                    "default": [
                        "-v",
                        "-s",
                        ".",
                        "-p",
                        "*test*.py"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "scope": "resource"
                },
                "python.testing.unittestEnabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Enable testing using unittest.",
                    "scope": "resource"
                },
                "python.testing.autoTestDiscoverOnSaveEnabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable auto run test discovery when saving a test file.",
                    "scope": "resource"
                },
                "python.venvFolders": {
                    "type": "array",
                    "default": [],
                    "description": "Folders in your home directory to look into for virtual environments (supports pyenv, direnv and virtualenvwrapper by default).",
                    "scope": "resource",
                    "items": {
                        "type": "string"
                    }
                },
                "python.venvPath": {
                    "type": "string",
                    "default": "",
                    "description": "Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).",
                    "scope": "resource"
                },
                "python.workspaceSymbols.ctagsPath": {
                    "type": "string",
                    "default": "ctags",
                    "description": "Fully qualified path to the ctags executable (else leave as ctags, assuming it is in current path).",
                    "scope": "resource"
                },
                "python.workspaceSymbols.enabled": {
                    "type": "boolean",
                    "default": false,
                    "description": "Set to 'true' to enable ctags to provide Workspace Symbols.",
                    "scope": "resource"
                },
                "python.workspaceSymbols.exclusionPatterns": {
                    "type": "array",
                    "default": [
                        "**/site-packages/**"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "description": "Pattern used to exclude files and folders from ctags See http://ctags.sourceforge.net/ctags.html.",
                    "scope": "resource"
                },
                "python.workspaceSymbols.rebuildOnFileSave": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to re-build the tags file on when changes made to python files are saved.",
                    "scope": "resource"
                },
                "python.workspaceSymbols.rebuildOnStart": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether to re-build the tags file on start (defaults to true).",
                    "scope": "resource"
                },
                "python.workspaceSymbols.tagFilePath": {
                    "type": "string",
                    "default": "${workspaceFolder}/.vscode/tags",
                    "description": "Fully qualified path to tag file (exuberant ctag file), used to provide workspace symbols.",
                    "scope": "resource"
                },
                "python.dataScience.magicCommandsAsComments": {
                    "type": "boolean",
                    "default": false,
                    "description": "Uncomment shell assignments (#!), line magic (#!%) and cell magic (#!%%) when parsing code cells.",
                    "scope": "resource"
                },
                "python.dataScience.runMagicCommands": {
                    "type": "string",
                    "default": "",
                    "deprecationMessage": "This setting has been deprecated in favor of 'runStartupCommands'.",
                    "description": "A series of Python instructions or iPython magic commands separated by '\\n' that will be executed when the interactive window loads.",
                    "scope": "resource"
                },
                "python.dataScience.runStartupCommands": {
                    "type": "string",
                    "default": "",
                    "description": "A series of Python instructions or iPython magic commands separated by '\\n' that will be executed when the interactive window loads. For instance, set this to '%load_ext autoreload\\n%autoreload 2' to automatically reload changes made to imported files without having to restart the interactive session.",
                    "scope": "resource"
                },
                "python.dataScience.debugJustMyCode": {
                    "type": "boolean",
                    "default": true,
                    "description": "When debugging, debug just my code.",
                    "scope": "resource"
                },
                "python.insidersChannel": {
                    "type": "string",
                    "default": "off",
                    "description": "Set to \"weekly\" or \"daily\" to automatically download and install the latest Insiders builds of the python extension, which include upcoming features and bug fixes.",
                    "enum": [
                        "off",
                        "weekly",
                        "daily"
                    ],
                    "scope": "application"
                }
            }
        },
        "languages": [
            {
                "id": "pip-requirements",
                "aliases": [
                    "pip requirements",
                    "requirements.txt"
                ],
                "filenames": [
                    "requirements.txt",
                    "constraints.txt",
                    "requirements.in"
                ],
                "filenamePatterns": [
                    "*-requirements.txt",
                    "requirements-*.txt",
                    "constraints-*.txt",
                    "*-constraints.txt",
                    "*-requirements.in",
                    "requirements-*.in"
                ],
                "configuration": "./languages/pip-requirements.json"
            },
            {
                "id": "yaml",
                "filenames": [
                    ".condarc"
                ]
            },
            {
                "id": "toml",
                "filenames": [
                    "poetry.lock",
                    "Pipfile"
                ]
            },
            {
                "id": "json",
                "filenames": [
                    "Pipfile.lock"
                ]
            },
            {
                "id": "ini",
                "filenames": [
                    ".flake8"
                ]
            },
            {
                "id": "jinja",
                "extensions": [
                    ".jinja2",
                    ".j2"
                ],
                "aliases": [
                    "Jinja"
                ]
            },
            {
                "id": "jupyter",
                "aliases": [
                    "Jupyter",
                    "Notebook"
                ],
                "extensions": [
                    ".ipynb"
                ]
            }
        ],
        "grammars": [
            {
                "language": "pip-requirements",
                "scopeName": "source.pip-requirements",
                "path": "./syntaxes/pip-requirements.tmLanguage.json"
            }
        ],
        "jsonValidation": [
            {
                "fileMatch": ".condarc",
                "url": "./schemas/condarc.json"
            },
            {
                "fileMatch": "environment.yml",
                "url": "./schemas/conda-environment.json"
            },
            {
                "fileMatch": "meta.yaml",
                "url": "./schemas/conda-meta.json"
            }
        ],
        "yamlValidation": [
            {
                "fileMatch": ".condarc",
                "url": "./schemas/condarc.json"
            },
            {
                "fileMatch": "environment.yml",
                "url": "./schemas/conda-environment.json"
            },
            {
                "fileMatch": "meta.yaml",
                "url": "./schemas/conda-meta.json"
            }
        ],
        "views": {
            "test": [
                {
                    "id": "python_tests",
                    "name": "Python",
                    "when": "testsDiscovered"
                }
            ]
        }
    },
    "scripts": {
        "package": "gulp clean && gulp prePublishBundle && vsce package -o ms-python-insiders.vsix",
        "compile": "tsc -watch -p ./",
        "compile-webviews-watch": "npm run build-ipywidgets && cross-env NODE_OPTIONS=--max_old_space_size=9096 webpack --config ./build/webpack/webpack.datascience-ui.config.js --watch",
        "build-ipywidgets": "npm run build-ipywidgets-clean && npm run build-ipywidgets-compile && npm run build-ipywidgets-webpack",
        "build-ipywidgets-clean": "node ./src/ipywidgets/scripts/clean.js",
        "build-ipywidgets-compile": "tsc -p ./src/ipywidgets && rimraf ./out/tsconfig.tsbuildinfo && node ./src/ipywidgets/scripts/copyfiles.js",
        "build-ipywidgets-webpack": "cross-env NODE_OPTIONS=--max_old_space_size=9096 webpack --config ./src/ipywidgets/webpack.config.js",
        "checkDependencies": "gulp checkDependencies",
        "postinstall": "node ./build/ci/postInstall.js",
        "test": "node ./out/test/standardTest.js && node ./out/test/multiRootTest.js",
        "test:unittests": "mocha --opts ./build/.mocha.unittests.js.opts",
        "test:unittests:cover": "nyc --no-clean --nycrc-path build/.nycrc mocha --opts ./build/.mocha.unittests.ts.opts",
        "test:functional": "mocha --require source-map-support/register --opts ./build/.mocha.functional.opts",
        "test:functional:perf": "node --inspect-brk ./node_modules/mocha/bin/_mocha --require source-map-support/register --opts ./build/.mocha.functional.perf.opts",
        "test:functional:cover": "npm run test:functional",
        "test:cover:report": "nyc --nycrc-path build/.nycrc  report --reporter=text --reporter=html --reporter=text-summary --reporter=cobertura",
        "testDebugger": "node ./out/test/testBootstrap.js ./out/test/debuggerTest.js",
        "testSingleWorkspace": "node ./out/test/testBootstrap.js ./out/test/standardTest.js",
        "testMultiWorkspace": "node ./out/test/testBootstrap.js ./out/test/multiRootTest.js",
        "testPerformance": "node ./out/test/testBootstrap.js ./out/test/performanceTest.js",
        "testSmoke": "node ./out/test/smokeTest.js",
        "lint-staged": "node gulpfile.js",
        "lint": "tslint src/**/*.ts -t verbose",
        "prettier-fix": "prettier 'src/**/*.ts*' --write && prettier 'build/**/*.js' --write",
        "clean": "gulp clean",
        "updateBuildNumber": "gulp updateBuildNumber",
        "verifyBundle": "gulp verifyBundle",
        "webpack": "webpack"
    },
    "dependencies": {
        "@jupyter-widgets/schema": "^0.4.0",
        "@jupyterlab/coreutils": "^3.1.0",
        "@jupyterlab/services": "^4.2.0",
        "@koa/cors": "^3.0.0",
        "@loadable/component": "^5.12.0",
        "@nteract/messaging": "^7.0.0",
        "ansi-regex": "^4.1.0",
        "arch": "^2.1.0",
        "azure-storage": "^2.10.3",
        "detect-indent": "^6.0.0",
        "diff-match-patch": "^1.0.0",
        "fast-deep-equal": "^2.0.1",
        "font-awesome": "^4.7.0",
        "fs-extra": "^4.0.3",
        "fuzzy": "^0.1.3",
        "get-port": "^3.2.0",
        "glob": "^7.1.2",
        "hash.js": "^1.1.7",
        "iconv-lite": "^0.4.21",
        "inversify": "^4.11.1",
        "is-online": "^8.2.1",
        "jsonc-parser": "^2.0.3",
        "koa": "^2.11.0",
        "koa-compress": "^3.0.0",
        "koa-logger": "^3.2.1",
        "line-by-line": "^0.1.6",
        "lodash": "^4.17.15",
        "log4js": "^6.1.2",
        "md5": "^2.2.1",
        "minimatch": "^3.0.4",
        "named-js-regexp": "^1.3.3",
        "node-fetch": "^1.0.0",
        "node-stream-zip": "^1.6.0",
        "onigasm": "^2.2.2",
        "pdfkit": "^0.11.0",
        "pidusage": "^1.2.0",
        "portfinder": "^1.0.25",
        "reflect-metadata": "^0.1.12",
        "request": "^2.87.0",
        "request-progress": "^3.0.0",
        "rxjs": "^6.5.4",
        "rxjs-compat": "^6.5.4",
        "sanitize-filename": "^1.6.3",
        "semver": "^5.5.0",
        "stack-trace": "0.0.10",
        "string-argv": "^0.3.1",
        "strip-ansi": "^5.2.0",
        "sudo-prompt": "^8.2.0",
        "svg-to-pdfkit": "^0.1.8",
        "tmp": "^0.0.29",
        "tree-kill": "^1.2.2",
        "typescript-char": "^0.0.0",
        "uint64be": "^1.0.1",
        "unicode": "^10.0.0",
        "untildify": "^3.0.2",
        "vscode-debugadapter": "^1.28.0",
        "vscode-debugprotocol": "^1.28.0",
        "vscode-extension-telemetry": "0.1.0",
        "vscode-jsonrpc": "^5.0.1",
        "vscode-languageclient": "^6.2.0-next.2",
        "vscode-languageserver": "^6.2.0-next.2",
        "vscode-languageserver-protocol": "^3.16.0-next.2",
        "vsls": "^0.3.1291",
        "winreg": "^1.2.4",
        "winston": "^3.2.1",
        "ws": "^6.0.0",
        "xml2js": "^0.4.19",
        "zeromq": "^6.0.0-beta.6"
    },
    "devDependencies": {
        "@babel/cli": "^7.8.4",
        "@babel/core": "^7.4.4",
        "@babel/plugin-transform-runtime": "^7.4.4",
        "@babel/polyfill": "^7.4.4",
        "@babel/preset-env": "^7.1.0",
        "@babel/preset-react": "^7.0.0",
        "@babel/register": "^7.9.0",
        "@blueprintjs/select": "^3.11.2",
        "@enonic/fnv-plus": "^1.3.0",
        "@istanbuljs/nyc-config-typescript": "^0.1.3",
        "@jupyter-widgets/base": "^2.0.1",
        "@jupyter-widgets/controls": "^1.5.2",
        "@jupyter-widgets/jupyterlab-manager": "^1.0.2",
        "@jupyter-widgets/output": "^2.0.1",
        "@nteract/plotly": "^1.48.3",
        "@nteract/transform-dataresource": "^4.3.5",
        "@nteract/transform-geojson": "^3.2.3",
        "@nteract/transform-model-debug": "^3.2.3",
        "@nteract/transform-plotly": "^6.0.0",
        "@nteract/transform-vega": "^6.0.3",
        "@nteract/transforms": "^4.4.4",
        "@phosphor/widgets": "^1.9.3",
        "@testing-library/react": "^9.4.0",
        "@types/ansi-regex": "^4.0.0",
        "@types/chai": "^4.1.2",
        "@types/chai-arrays": "^1.0.2",
        "@types/chai-as-promised": "^7.1.0",
        "@types/copy-webpack-plugin": "^4.4.2",
        "@types/cors": "^2.8.6",
        "@types/debug": "^4.1.5",
        "@types/dedent": "^0.7.0",
        "@types/del": "^3.0.0",
        "@types/diff-match-patch": "^1.0.32",
        "@types/download": "^6.2.2",
        "@types/enzyme": "^3.1.14",
        "@types/enzyme-adapter-react-16": "^1.0.3",
        "@types/event-stream": "^3.3.33",
        "@types/fs-extra": "^5.0.1",
        "@types/get-port": "^3.2.0",
        "@types/glob": "^5.0.35",
        "@types/html-webpack-plugin": "^3.2.0",
        "@types/iconv-lite": "^0.0.1",
        "@types/jsdom": "^11.12.0",
        "@types/koa": "^2.11.0",
        "@types/koa-compress": "^2.0.9",
        "@types/koa-logger": "^3.1.1",
        "@types/koa__cors": "^2.2.3",
        "@types/loadable__component": "^5.10.0",
        "@types/loader-utils": "^1.1.3",
        "@types/lodash": "^4.14.104",
        "@types/md5": "^2.1.32",
        "@types/memoize-one": "^4.1.1",
        "@types/mocha": "^5.2.7",
        "@types/nock": "^10.0.3",
        "@types/node": "^10.14.18",
        "@types/node-fetch": "^2.3.4",
        "@types/pdfkit": "^0.7.36",
        "@types/promisify-node": "^0.4.0",
        "@types/react": "^16.4.14",
        "@types/react-dom": "^16.0.8",
        "@types/react-json-tree": "^0.6.8",
        "@types/react-redux": "^7.1.5",
        "@types/react-virtualized": "^9.21.2",
        "@types/redux-logger": "^3.0.7",
        "@types/request": "^2.47.0",
        "@types/semver": "^5.5.0",
        "@types/shortid": "^0.0.29",
        "@types/sinon": "^7.5.1",
        "@types/socket.io": "^2.1.4",
        "@types/stack-trace": "0.0.29",
        "@types/temp": "^0.8.32",
        "@types/tmp": "0.0.33",
        "@types/untildify": "^3.0.0",
        "@types/uuid": "^3.4.3",
        "@types/vscode": "^1.43.0",
        "@types/webpack-bundle-analyzer": "^2.13.0",
        "@types/winreg": "^1.2.30",
        "@types/ws": "^6.0.1",
        "@types/xml2js": "^0.4.2",
        "acorn": "^6.4.1",
        "ansi-to-html": "^0.6.7",
        "awesome-typescript-loader": "^5.2.1",
        "babel-loader": "^8.0.3",
        "babel-plugin-inline-json-import": "^0.3.1",
        "babel-plugin-transform-runtime": "^6.23.0",
        "babel-polyfill": "^6.26.0",
        "bootstrap": "^4.3.1",
        "bootstrap-less": "^3.3.8",
        "brfs": "^2.0.2",
        "canvas": "^2.6.0",
        "chai": "^4.1.2",
        "chai-arrays": "^2.0.0",
        "chai-as-promised": "^7.1.1",
        "chai-http": "^4.3.0",
        "codecov": "^3.6.5",
        "colors": "^1.2.1",
        "copy-webpack-plugin": "^5.1.1",
        "cors": "^2.8.5",
        "cross-env": "^6.0.3",
        "cross-spawn": "^6.0.5",
        "css-loader": "^1.0.1",
        "dedent": "^0.7.0",
        "del": "^3.0.0",
        "download": "^7.0.0",
        "enzyme": "^3.7.0",
        "enzyme-adapter-react-16": "^1.6.0",
        "eslint-config-prettier": "^6.9.0",
        "eslint-plugin-prettier": "^3.1.2",
        "event-stream": "3.3.4",
        "expose-loader": "^0.7.5",
        "express": "^4.17.1",
        "extract-zip": "^1.6.7",
        "fast-xml-parser": "^3.16.0",
        "file-loader": "^5.1.0",
        "filemanager-webpack-plugin-fixed": "^2.0.9",
        "flat": "^4.0.0",
        "gulp": "^4.0.0",
        "gulp-azure-storage": "^0.11.1",
        "gulp-chmod": "^2.0.0",
        "gulp-filter": "^5.1.0",
        "gulp-gunzip": "^1.1.0",
        "gulp-rename": "^1.4.0",
        "gulp-sourcemaps": "^2.6.4",
        "gulp-typescript": "^4.0.1",
        "gulp-untar": "0.0.8",
        "gulp-vinyl-zip": "^2.1.2",
        "html-webpack-plugin": "^3.2.0",
        "husky": "^1.1.2",
        "immutable": "^4.0.0-rc.12",
        "jsdom": "^15.0.0",
        "json-loader": "^0.5.7",
        "less": "^3.9.0",
        "less-loader": "^5.0.0",
        "less-plugin-inline-urls": "^1.2.0",
        "loader-utils": "^1.1.0",
        "lolex": "^5.1.2",
        "memoize-one": "^5.1.1",
        "mocha": "^6.2.3",
        "mocha-junit-reporter": "^1.17.0",
        "mocha-multi-reporters": "^1.1.7",
        "monaco-editor": "0.18.1",
        "monaco-editor-textmate": "^2.2.1",
        "monaco-editor-webpack-plugin": "^1.7.0",
        "monaco-textmate": "^3.0.1",
        "nocache": "^2.1.0",
        "nock": "^10.0.6",
        "node-has-native-dependencies": "^1.0.2",
        "node-html-parser": "^1.1.13",
        "nyc": "^15.0.0",
        "playwright-chromium": "^0.13.0",
        "postcss": "^7.0.27",
        "postcss-cssnext": "^3.1.0",
        "postcss-import": "^12.0.1",
        "postcss-loader": "^3.0.0",
        "prettier": "^2.0.2",
        "range-inclusive": "^1.0.2",
        "raw-loader": "^0.5.1",
        "react": "^16.5.2",
        "react-data-grid": "^6.0.2-0",
        "react-dev-utils": "^5.0.2",
        "react-dom": "^16.5.2",
        "react-json-tree": "^0.11.0",
        "react-redux": "^7.1.1",
        "react-svg-pan-zoom": "^3.1.0",
        "react-svgmt": "^1.1.8",
        "react-virtualized": "^9.21.1",
        "redux": "^4.0.4",
        "redux-logger": "^3.0.6",
        "relative": "^3.0.2",
        "remove-files-webpack-plugin": "^1.4.0",
        "requirejs": "^2.3.6",
        "rewiremock": "^3.13.0",
        "rimraf": "^3.0.2",
        "sass-loader": "^7.1.0",
        "serialize-javascript": "^2.1.2",
        "shortid": "^2.2.8",
        "sinon": "^8.0.1",
        "slickgrid": "^2.4.17",
        "socket.io": "^2.3.0",
        "source-map-support": "^0.5.12",
        "style-loader": "^0.23.1",
        "styled-jsx": "^3.1.0",
        "svg-inline-loader": "^0.8.0",
        "svg-inline-react": "^3.1.0",
        "terser-webpack-plugin": "^2.3.2",
        "transform-loader": "^0.2.4",
        "ts-loader": "^5.3.0",
        "ts-mockito": "^2.5.0",
        "ts-node": "^8.3.0",
        "tsconfig-paths-webpack-plugin": "^3.2.0",
        "tslint": "^5.20.1",
        "tslint-config-prettier": "^1.18.0",
        "tslint-eslint-rules": "^5.1.0",
        "tslint-microsoft-contrib": "^5.0.3",
        "tslint-plugin-prettier": "^2.1.0",
        "typed-react-markdown": "^0.1.0",
        "typemoq": "^2.1.0",
        "typescript": "^3.8.3",
        "typescript-formatter": "^7.1.0",
        "unicode-properties": "^1.3.1",
        "url-loader": "^1.1.2",
        "uuid": "^3.3.2",
        "vinyl-fs": "^3.0.3",
        "vsce": "^1.59.0",
        "vscode-debugadapter-testsupport": "^1.27.0",
        "vscode-test": "^1.2.3",
        "webpack": "^4.33.0",
        "webpack-bundle-analyzer": "^3.6.0",
        "webpack-cli": "^3.1.2",
        "webpack-fix-default-import-plugin": "^1.0.3",
        "webpack-merge": "^4.1.4",
        "webpack-node-externals": "^1.7.2",
        "webpack-require-from": "^1.8.0",
        "why-is-node-running": "^2.0.3",
        "wtfnode": "^0.8.0",
        "yargs": "^12.0.2"
    },
    "__metadata": {
        "id": "f1f59ae4-9318-4f3c-a9b5-81b2eaa5f8a5",
        "publisherDisplayName": "Microsoft",
        "publisherId": "998b010b-e2af-44a5-a6cd-0b5fd3b9b6f8"
    }
}
